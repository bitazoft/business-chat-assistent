2025-07-07 07:59:50,140 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 07:59:50,252 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 07:59:50,496 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 07:59:50,504 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 07:59:50,936 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 07:59:50,937 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 07:59:50,937 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 07:59:50,937 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 07:59:50,937 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 07:59:50,937 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 07:59:50,938 - agent.agent - INFO - [agent.py:539] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 07:59:50,938 - agent.agent - INFO - [agent.py:196] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 07:59:50,938 - agent.agent - INFO - [agent.py:266] - [Function Agent] Creating function agent for seller_id: 1, user_id: user1
2025-07-07 07:59:50,983 - agent.agent - INFO - [agent.py:367] - [Function Agent] Function agent created successfully
2025-07-07 07:59:50,983 - agent.agent - INFO - [agent.py:371] - [User Management Agent] Creating user management chain for seller_id: 1, user_id: user1
2025-07-07 07:59:50,984 - agent.agent - INFO - [agent.py:397] - [User Management Agent] User management chain created successfully
2025-07-07 07:59:50,984 - agent.agent - INFO - [agent.py:401] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 07:59:50,984 - agent.agent - INFO - [agent.py:532] - [Response Agent] Response agent created successfully
2025-07-07 07:59:50,984 - agent.agent - INFO - [agent.py:556] - [Multi-Agent System] All agents created successfully
2025-07-07 07:59:50,984 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 07:59:50,984 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 07:59:50,984 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 07:59:50,985 - agent.agent - INFO - [agent.py:562] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 07:59:50,985 - agent.agent - INFO - [agent.py:567] - [Multi-Agent System] Processing user input: need details about wireless mouse
2025-07-07 07:59:50,985 - agent.agent - INFO - [agent.py:570] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 07:59:50,985 - agent.agent - INFO - [agent.py:231] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 07:59:50,985 - agent.agent - INFO - [agent.py:236] - [Intent Agent] Step 1: Extracting entities
2025-07-07 07:59:56,729 - agent.agent - INFO - [agent.py:245] - [Intent Agent] Step 2: Classifying intent
2025-07-07 08:00:03,512 - agent.agent - INFO - [agent.py:256] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "product_info",
  "confidence": 0.95,
  "reasoning": "The user is specifically asking for details about a product ('wireless mouse'), which directly aligns with the 'product_info' intent. The context and entities clearly indicate a request for product-related information."
}
```
2025-07-07 08:00:03,512 - agent.agent - INFO - [agent.py:581] - [Multi-Agent System] Detected intent: product_info
2025-07-07 08:00:03,513 - agent.agent - INFO - [agent.py:303] - [Function Agent] Invoking function chain with input: {'input': 'need details about wireless mouse', 'intent': 'product_info'}
2025-07-07 08:00:24,783 - agent.agent - ERROR - [agent.py:187] - [JSON Parser] Failed to parse JSON: Expecting value: line 1 column 1 (char 0)
2025-07-07 08:00:24,784 - agent.agent - INFO - [agent.py:331] - [Function Agent] Chain result: {}
2025-07-07 08:00:24,955 - agent.agent - INFO - [agent.py:360] - [Function Agent] Chain invocation successful
2025-07-07 08:00:24,956 - agent.agent - INFO - [agent.py:649] - [Multi-Agent System] Step 4: Logging query
2025-07-07 08:00:24,956 - agent.agent - ERROR - [agent.py:654] - [Multi-Agent System] Error logging query: local variable 'function_output' referenced before assignment
2025-07-07 08:00:24,956 - agent.agent - INFO - [agent.py:657] - [Multi-Agent System] Step 5: Generating response
2025-07-07 08:00:24,956 - agent.agent - ERROR - [agent.py:671] - [Multi-Agent System] Error processing request: local variable 'function_output' referenced before assignment
2025-07-07 08:00:24,956 - agent.agent - ERROR - [agent.py:672] - [Multi-Agent System] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 661, in process_input
    "function_output": function_output
UnboundLocalError: local variable 'function_output' referenced before assignment
2025-07-07 08:00:24,957 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 08:01:47,269 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:01:47,287 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:01:47,310 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:01:47,318 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:02:42,684 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:02:42,701 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:02:42,721 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:02:42,729 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:05:50,489 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:05:50,502 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:05:50,522 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:05:50,529 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:06:10,853 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:06:10,867 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:06:10,885 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:06:10,893 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:06:43,771 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:06:43,784 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:06:43,803 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:06:43,809 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:06:53,031 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 08:06:53,032 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 08:06:53,032 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 08:06:53,032 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 08:06:53,032 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 08:06:53,033 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 08:06:53,033 - agent.agent - INFO - [agent.py:530] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 08:06:53,033 - agent.agent - INFO - [agent.py:196] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 08:06:53,034 - agent.agent - INFO - [agent.py:266] - [Function Agent] Creating function agent for seller_id: 1, user_id: user1
2025-07-07 08:06:53,088 - agent.agent - INFO - [agent.py:358] - [Function Agent] Function agent created successfully
2025-07-07 08:06:53,088 - agent.agent - INFO - [agent.py:362] - [User Management Agent] Creating user management chain for seller_id: 1, user_id: user1
2025-07-07 08:06:53,088 - agent.agent - INFO - [agent.py:388] - [User Management Agent] User management chain created successfully
2025-07-07 08:06:53,088 - agent.agent - INFO - [agent.py:392] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 08:06:53,088 - agent.agent - INFO - [agent.py:523] - [Response Agent] Response agent created successfully
2025-07-07 08:06:53,089 - agent.agent - INFO - [agent.py:547] - [Multi-Agent System] All agents created successfully
2025-07-07 08:06:53,089 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 08:06:53,089 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 08:06:53,089 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 08:06:53,089 - agent.agent - INFO - [agent.py:553] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 08:06:53,089 - agent.agent - INFO - [agent.py:558] - [Multi-Agent System] Processing user input: need details about wireless mouse
2025-07-07 08:06:53,089 - agent.agent - INFO - [agent.py:561] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 08:06:53,089 - agent.agent - INFO - [agent.py:231] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 08:06:53,090 - agent.agent - INFO - [agent.py:236] - [Intent Agent] Step 1: Extracting entities
2025-07-07 08:06:58,466 - agent.agent - INFO - [agent.py:245] - [Intent Agent] Step 2: Classifying intent
2025-07-07 08:07:04,621 - agent.agent - INFO - [agent.py:256] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "product_info",
  "confidence": 0.95,
  "reasoning": "The user is specifically asking for details about a product (wireless mouse), which directly aligns with the 'product_info' intent. The context and extracted entities clearly indicate a request for product-related information."
}
```
2025-07-07 08:07:04,621 - agent.agent - INFO - [agent.py:572] - [Multi-Agent System] Detected intent: product_info
2025-07-07 08:07:04,621 - agent.agent - INFO - [agent.py:303] - [Function Agent] Invoking function chain with input: {'input': 'need details about wireless mouse', 'intent': 'product_info'}
2025-07-07 08:07:16,075 - agent.agent - ERROR - [agent.py:187] - [JSON Parser] Failed to parse JSON: Expecting value: line 1 column 1 (char 0)
2025-07-07 08:07:16,075 - agent.agent - INFO - [agent.py:331] - [Function Agent] Chain result: {}
2025-07-07 08:07:16,131 - agent.agent - INFO - [agent.py:351] - [Function Agent] Chain invocation successful
2025-07-07 08:07:16,132 - agent.agent - INFO - [agent.py:643] - [Multi-Agent System] Step 4: Logging query
2025-07-07 08:07:16,133 - agent.agent - INFO - [agent.py:646] - [Multi-Agent System] Query logged successfully
2025-07-07 08:07:16,134 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Step 5: Generating response
2025-07-07 08:07:16,134 - agent.agent - INFO - [agent.py:457] - [Response Agent] Processing response for seller_id: 1
2025-07-07 08:07:16,134 - agent.agent - INFO - [agent.py:462] - [Response Agent] Step 1: Determining response strategy
2025-07-07 08:07:21,525 - agent.agent - INFO - [agent.py:476] - [Response Agent] Step 2: Generating response
2025-07-07 08:07:27,031 - agent.agent - INFO - [agent.py:496] - [Response Agent] Response generation completed
2025-07-07 08:07:27,031 - agent.agent - INFO - [agent.py:658] - [Multi-Agent System] Processing completed successfully
2025-07-07 08:07:27,031 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 08:07:48,384 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:07:48,401 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:07:48,420 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:07:48,428 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:07:48,820 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 08:07:48,820 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 08:07:48,821 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 08:07:48,821 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 08:07:48,821 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 08:07:48,822 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 08:07:48,822 - agent.agent - INFO - [agent.py:530] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 08:07:48,822 - agent.agent - INFO - [agent.py:196] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 08:07:48,823 - agent.agent - INFO - [agent.py:266] - [Function Agent] Creating function agent for seller_id: 1, user_id: user1
2025-07-07 08:07:48,865 - agent.agent - INFO - [agent.py:358] - [Function Agent] Function agent created successfully
2025-07-07 08:07:48,866 - agent.agent - INFO - [agent.py:362] - [User Management Agent] Creating user management chain for seller_id: 1, user_id: user1
2025-07-07 08:07:48,866 - agent.agent - INFO - [agent.py:388] - [User Management Agent] User management chain created successfully
2025-07-07 08:07:48,866 - agent.agent - INFO - [agent.py:392] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 08:07:48,867 - agent.agent - INFO - [agent.py:523] - [Response Agent] Response agent created successfully
2025-07-07 08:07:48,867 - agent.agent - INFO - [agent.py:547] - [Multi-Agent System] All agents created successfully
2025-07-07 08:07:48,867 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 08:07:48,867 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 08:07:48,867 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 08:07:48,868 - agent.agent - INFO - [agent.py:553] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 08:07:48,868 - agent.agent - INFO - [agent.py:558] - [Multi-Agent System] Processing user input: need details about wireless mouse
2025-07-07 08:07:48,868 - agent.agent - INFO - [agent.py:561] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 08:07:48,868 - agent.agent - INFO - [agent.py:231] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 08:07:48,868 - agent.agent - INFO - [agent.py:236] - [Intent Agent] Step 1: Extracting entities
2025-07-07 08:07:54,273 - agent.agent - INFO - [agent.py:245] - [Intent Agent] Step 2: Classifying intent
2025-07-07 08:08:03,588 - agent.agent - INFO - [agent.py:256] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "product_info",
  "confidence": 0.95,
  "reasoning": "The user is specifically asking for details about a 'wireless mouse', which is a product. The intent aligns with seeking information about a product, hence 'product_info' is the most appropriate intent. The confidence is high because the request is clear and directly related to product details."
}
```
2025-07-07 08:08:03,589 - agent.agent - INFO - [agent.py:572] - [Multi-Agent System] Detected intent: product_info
2025-07-07 08:08:03,589 - agent.agent - INFO - [agent.py:303] - [Function Agent] Invoking function chain with input: {'input': 'need details about wireless mouse', 'intent': 'product_info'}
2025-07-07 08:08:10,166 - agent.agent - INFO - [agent.py:326] - [Function Agent] Chain invocation result: ```json
{
  "function": "get_product_info",
  "parameters": {
    "product_name": "wireless mouse"
  },
  "output": "Here are the details about our wireless mouse: It features Bluetooth 5.0 connectivity, up to 12 months of battery life, adjustable DPI (800-1600), ergonomic design, and silent clicks. Let me know if you'd like more specifics!"
}
```
2025-07-07 08:08:10,167 - agent.agent - INFO - [agent.py:331] - [Function Agent] Chain result: {'function': 'get_product_info', 'parameters': {'product_name': 'wireless mouse'}, 'output': "Here are the details about our wireless mouse: It features Bluetooth 5.0 connectivity, up to 12 months of battery life, adjustable DPI (800-1600), ergonomic design, and silent clicks. Let me know if you'd like more specifics!"}
2025-07-07 08:08:10,223 - agent.agent - INFO - [agent.py:351] - [Function Agent] Chain invocation successful
2025-07-07 08:08:10,223 - agent.agent - INFO - [agent.py:643] - [Multi-Agent System] Step 4: Logging query
2025-07-07 08:08:10,225 - agent.agent - INFO - [agent.py:646] - [Multi-Agent System] Query logged successfully
2025-07-07 08:08:10,225 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Step 5: Generating response
2025-07-07 08:08:10,225 - agent.agent - INFO - [agent.py:457] - [Response Agent] Processing response for seller_id: 1
2025-07-07 08:08:10,225 - agent.agent - INFO - [agent.py:462] - [Response Agent] Step 1: Determining response strategy
2025-07-07 08:08:15,154 - agent.agent - INFO - [agent.py:476] - [Response Agent] Step 2: Generating response
2025-07-07 08:08:21,576 - agent.agent - INFO - [agent.py:496] - [Response Agent] Response generation completed
2025-07-07 08:08:21,577 - agent.agent - INFO - [agent.py:658] - [Multi-Agent System] Processing completed successfully
2025-07-07 08:08:21,577 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 08:10:00,303 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 08:10:00,303 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 08:10:00,303 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 08:10:00,303 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 08:10:00,304 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 08:10:00,304 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 08:10:00,304 - agent.agent - INFO - [agent.py:530] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 08:10:00,304 - agent.agent - INFO - [agent.py:196] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 08:10:00,305 - agent.agent - INFO - [agent.py:266] - [Function Agent] Creating function agent for seller_id: 1, user_id: user1
2025-07-07 08:10:00,351 - agent.agent - INFO - [agent.py:358] - [Function Agent] Function agent created successfully
2025-07-07 08:10:00,351 - agent.agent - INFO - [agent.py:362] - [User Management Agent] Creating user management chain for seller_id: 1, user_id: user1
2025-07-07 08:10:00,352 - agent.agent - INFO - [agent.py:388] - [User Management Agent] User management chain created successfully
2025-07-07 08:10:00,352 - agent.agent - INFO - [agent.py:392] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 08:10:00,353 - agent.agent - INFO - [agent.py:523] - [Response Agent] Response agent created successfully
2025-07-07 08:10:00,353 - agent.agent - INFO - [agent.py:547] - [Multi-Agent System] All agents created successfully
2025-07-07 08:10:00,353 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 08:10:00,353 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 08:10:00,353 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 08:10:00,354 - agent.agent - INFO - [agent.py:553] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 08:10:00,354 - agent.agent - INFO - [agent.py:558] - [Multi-Agent System] Processing user input: I want buy this
2025-07-07 08:10:00,354 - agent.agent - INFO - [agent.py:561] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 08:10:00,354 - agent.agent - INFO - [agent.py:231] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 08:10:00,354 - agent.agent - INFO - [agent.py:236] - [Intent Agent] Step 1: Extracting entities
2025-07-07 08:10:05,748 - agent.agent - INFO - [agent.py:245] - [Intent Agent] Step 2: Classifying intent
2025-07-07 08:10:12,005 - agent.agent - INFO - [agent.py:256] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user's statement 'I want buy this' clearly indicates a desire to purchase a product, which aligns with the 'place_order' intent. The confidence is not 1.0 because the product is unspecified, which could potentially indicate a need for product information first."
}
```
2025-07-07 08:10:12,006 - agent.agent - INFO - [agent.py:572] - [Multi-Agent System] Detected intent: place_order
2025-07-07 08:10:12,006 - agent.agent - INFO - [agent.py:576] - [Multi-Agent System] Step 2: Managing user for place_order intent
2025-07-07 08:10:18,047 - agent.agent - ERROR - [agent.py:594] - [Multi-Agent System] User management function error: check_user_exists() got an unexpected keyword argument 'seller_id'
2025-07-07 08:10:18,047 - agent.agent - INFO - [agent.py:596] - [Multi-Agent System] User management completed
2025-07-07 08:10:18,047 - agent.agent - INFO - [agent.py:303] - [Function Agent] Invoking function chain with input: {'input': 'I want buy this', 'intent': 'place_order'}
2025-07-07 08:10:23,739 - agent.agent - INFO - [agent.py:326] - [Function Agent] Chain invocation result: 
2025-07-07 08:10:23,740 - agent.agent - ERROR - [agent.py:187] - [JSON Parser] Failed to parse JSON: Expecting value: line 1 column 1 (char 0)
2025-07-07 08:10:23,740 - agent.agent - INFO - [agent.py:331] - [Function Agent] Chain result: {}
2025-07-07 08:10:23,742 - agent.agent - INFO - [agent.py:351] - [Function Agent] Chain invocation successful
2025-07-07 08:10:23,742 - agent.agent - INFO - [agent.py:643] - [Multi-Agent System] Step 4: Logging query
2025-07-07 08:10:23,745 - agent.agent - INFO - [agent.py:646] - [Multi-Agent System] Query logged successfully
2025-07-07 08:10:23,745 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Step 5: Generating response
2025-07-07 08:10:23,745 - agent.agent - INFO - [agent.py:457] - [Response Agent] Processing response for seller_id: 1
2025-07-07 08:10:23,745 - agent.agent - INFO - [agent.py:462] - [Response Agent] Step 1: Determining response strategy
2025-07-07 08:10:29,711 - agent.agent - INFO - [agent.py:476] - [Response Agent] Step 2: Generating response
2025-07-07 08:10:36,367 - agent.agent - INFO - [agent.py:496] - [Response Agent] Response generation completed
2025-07-07 08:10:36,367 - agent.agent - INFO - [agent.py:658] - [Multi-Agent System] Processing completed successfully
2025-07-07 08:10:36,367 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 08:19:45,992 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:19:46,007 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:19:46,027 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:19:46,035 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:20:29,316 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:20:29,331 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:20:29,351 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:20:29,360 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:21:00,079 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:21:00,094 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:21:00,114 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:21:00,121 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:21:16,307 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:21:16,323 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:21:16,344 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:21:16,353 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:21:44,131 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:21:44,148 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:21:44,168 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:21:44,175 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:22:06,126 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:22:06,141 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:22:06,159 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:22:06,166 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:22:44,759 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:22:44,778 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:22:44,802 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:22:44,811 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:23:52,627 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:23:52,641 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:23:52,660 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:23:52,668 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:25:58,074 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:25:58,088 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:25:58,106 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:25:58,115 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:26:11,829 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:26:11,842 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:26:11,861 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:26:11,868 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:27:39,920 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:27:39,937 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:27:39,958 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:27:39,966 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:30:45,503 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:30:45,518 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:30:45,537 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:30:45,545 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:31:19,706 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:31:19,720 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:31:19,741 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:31:19,748 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:31:29,744 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:31:29,757 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:31:29,777 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:31:29,784 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:31:37,582 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:31:37,597 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:31:37,617 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:31:37,624 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:31:45,250 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:31:45,267 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:31:45,285 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:31:45,294 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:31:54,864 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:31:54,878 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:31:54,898 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:31:54,905 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:32:05,235 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:32:05,247 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:32:05,265 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:32:05,273 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:32:13,916 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:32:13,937 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:32:13,963 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:32:13,975 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:33:57,127 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:33:57,143 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:33:57,162 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:33:57,169 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:36:04,118 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:36:04,134 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:36:04,156 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:36:04,165 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:36:31,348 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:36:31,362 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:36:31,383 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:36:31,390 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:39:46,328 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:39:46,344 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:39:46,363 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:39:46,372 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:40:52,881 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:40:52,895 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:40:52,916 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:40:52,923 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:44:54,464 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:44:54,478 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:44:54,501 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:44:54,508 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:46:35,393 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:46:35,409 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:46:35,428 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:46:35,435 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:47:11,476 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:47:11,492 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:47:11,512 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:47:11,520 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:47:38,665 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:47:38,681 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:47:38,700 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:47:38,709 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:47:52,066 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:47:52,081 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:47:52,101 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:47:52,107 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:53:27,100 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:53:27,115 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:53:27,135 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:53:27,143 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:54:14,742 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:54:14,758 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:54:14,778 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:54:14,786 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:54:40,888 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:54:40,903 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:54:40,922 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:54:40,928 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 08:57:13,913 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 08:57:13,927 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 08:57:13,945 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 08:57:13,952 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 09:00:22,186 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:00:22,186 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:00:22,186 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:00:22,186 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:00:22,186 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:00:22,186 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:00:22,187 - agent.agent - INFO - [agent.py:517] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:00:22,187 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:00:22,188 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:00:22,269 - agent.agent - INFO - [agent.py:375] - [Function Agent] Unified function agent created successfully
2025-07-07 09:00:22,269 - agent.agent - INFO - [agent.py:379] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 09:00:22,269 - agent.agent - INFO - [agent.py:510] - [Response Agent] Response agent created successfully
2025-07-07 09:00:22,271 - agent.agent - INFO - [agent.py:527] - [Multi-Agent System] All agents created successfully
2025-07-07 09:00:22,271 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 09:00:22,271 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 09:00:22,271 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 09:00:22,271 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: process_input() got an unexpected keyword argument 'chat_history'
2025-07-07 09:00:22,271 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 78, in chat
    response = process_input({
TypeError: process_input() got an unexpected keyword argument 'chat_history'
2025-07-07 09:01:57,131 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 09:01:57,147 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 09:01:57,167 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 09:01:57,175 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 09:02:09,641 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 09:02:09,656 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 09:02:09,674 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 09:02:09,682 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 09:02:11,685 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:02:11,685 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:02:11,685 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:02:11,687 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:02:11,687 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:02:11,687 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:02:11,688 - agent.agent - INFO - [agent.py:517] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:02:11,688 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:02:11,688 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:02:11,768 - agent.agent - INFO - [agent.py:375] - [Function Agent] Unified function agent created successfully
2025-07-07 09:02:11,768 - agent.agent - INFO - [agent.py:379] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 09:02:11,769 - agent.agent - INFO - [agent.py:510] - [Response Agent] Response agent created successfully
2025-07-07 09:02:11,769 - agent.agent - INFO - [agent.py:527] - [Multi-Agent System] All agents created successfully
2025-07-07 09:02:11,769 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 09:02:11,770 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 09:02:11,770 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 09:02:11,770 - agent.agent - INFO - [agent.py:539] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 09:02:11,770 - agent.agent - INFO - [agent.py:545] - [Multi-Agent System] Processing user input: hi
2025-07-07 09:02:11,770 - agent.agent - INFO - [agent.py:551] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 09:02:11,770 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 09:02:11,771 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 09:02:17,229 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 09:02:24,471 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "general_inquiry",
  "confidence": 0.9,
  "reasoning": "The user's input is a simple greeting ('hi') without any mention of products, orders, or user management. This suggests the user is initiating a general conversation or inquiry, making 'general_inquiry' the most appropriate intent."
}
```
2025-07-07 09:02:24,471 - agent.agent - INFO - [agent.py:562] - [Multi-Agent System] Detected intent: general_inquiry
2025-07-07 09:02:24,472 - agent.agent - INFO - [agent.py:565] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 09:02:24,472 - agent.agent - INFO - [agent.py:315] - [Function Agent] Invoking unified function agent with input: {'input': 'hi', 'intent': 'general_inquiry'}
2025-07-07 09:02:28,535 - agent.agent - INFO - [agent.py:339] - [Function Agent] Agent execution completed
2025-07-07 09:02:28,702 - agent.agent - INFO - [agent.py:574] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 09:02:28,702 - agent.agent - INFO - [agent.py:577] - [Multi-Agent System] Step 3: Generating response
2025-07-07 09:02:28,702 - agent.agent - INFO - [agent.py:444] - [Response Agent] Processing response for seller_id: 1
2025-07-07 09:02:28,702 - agent.agent - INFO - [agent.py:449] - [Response Agent] Step 1: Determining response strategy
2025-07-07 09:02:33,835 - agent.agent - INFO - [agent.py:463] - [Response Agent] Step 2: Generating response
2025-07-07 09:02:37,792 - agent.agent - INFO - [agent.py:483] - [Response Agent] Response generation completed
2025-07-07 09:02:37,792 - agent.agent - INFO - [agent.py:591] - [Multi-Agent System] Processing completed successfully
2025-07-07 09:02:37,793 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 09:02:51,495 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:02:51,495 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:02:51,496 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:02:51,496 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:02:51,496 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:02:51,496 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:02:51,496 - agent.agent - INFO - [agent.py:517] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:02:51,497 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:02:51,497 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:02:51,575 - agent.agent - INFO - [agent.py:375] - [Function Agent] Unified function agent created successfully
2025-07-07 09:02:51,575 - agent.agent - INFO - [agent.py:379] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 09:02:51,576 - agent.agent - INFO - [agent.py:510] - [Response Agent] Response agent created successfully
2025-07-07 09:02:51,576 - agent.agent - INFO - [agent.py:527] - [Multi-Agent System] All agents created successfully
2025-07-07 09:02:51,576 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 09:02:51,577 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 09:02:51,577 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 09:02:51,577 - agent.agent - INFO - [agent.py:539] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 09:02:51,577 - agent.agent - INFO - [agent.py:545] - [Multi-Agent System] Processing user input: do you gave wireless mouse?
2025-07-07 09:02:51,577 - agent.agent - INFO - [agent.py:551] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 09:02:51,577 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 09:02:51,578 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 09:02:57,663 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 09:03:04,446 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "product_info",
  "confidence": 0.9,
  "reasoning": "The user is asking about the availability of a specific product, 'wireless mouse', which directly relates to seeking information about a product. This aligns with the 'product_info' intent, which involves inquiries about product details, availability, or features."
}
```
2025-07-07 09:03:04,447 - agent.agent - INFO - [agent.py:562] - [Multi-Agent System] Detected intent: product_info
2025-07-07 09:03:04,447 - agent.agent - INFO - [agent.py:565] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 09:03:04,447 - agent.agent - INFO - [agent.py:315] - [Function Agent] Invoking unified function agent with input: {'input': 'do you gave wireless mouse?', 'intent': 'product_info'}
2025-07-07 09:03:16,759 - agent.agent - INFO - [agent.py:339] - [Function Agent] Agent execution completed
2025-07-07 09:03:16,760 - agent.agent - INFO - [agent.py:574] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 09:03:16,761 - agent.agent - INFO - [agent.py:577] - [Multi-Agent System] Step 3: Generating response
2025-07-07 09:03:16,761 - agent.agent - INFO - [agent.py:444] - [Response Agent] Processing response for seller_id: 1
2025-07-07 09:03:16,761 - agent.agent - INFO - [agent.py:449] - [Response Agent] Step 1: Determining response strategy
2025-07-07 09:03:22,130 - agent.agent - INFO - [agent.py:463] - [Response Agent] Step 2: Generating response
2025-07-07 09:03:28,631 - agent.agent - INFO - [agent.py:483] - [Response Agent] Response generation completed
2025-07-07 09:03:28,632 - agent.agent - INFO - [agent.py:591] - [Multi-Agent System] Processing completed successfully
2025-07-07 09:03:28,632 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 09:03:47,616 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:03:47,616 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:03:47,616 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:03:47,616 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:03:47,617 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:03:47,617 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:03:47,618 - agent.agent - INFO - [agent.py:517] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:03:47,618 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:03:47,619 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:03:47,778 - agent.agent - INFO - [agent.py:375] - [Function Agent] Unified function agent created successfully
2025-07-07 09:03:47,779 - agent.agent - INFO - [agent.py:379] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 09:03:47,779 - agent.agent - INFO - [agent.py:510] - [Response Agent] Response agent created successfully
2025-07-07 09:03:47,779 - agent.agent - INFO - [agent.py:527] - [Multi-Agent System] All agents created successfully
2025-07-07 09:03:47,780 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 09:03:47,780 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 09:03:47,780 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 09:03:47,780 - agent.agent - INFO - [agent.py:539] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 09:03:47,780 - agent.agent - INFO - [agent.py:545] - [Multi-Agent System] Processing user input: I need to buy this
2025-07-07 09:03:47,780 - agent.agent - INFO - [agent.py:551] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 09:03:47,782 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 09:03:47,782 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 09:03:54,234 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 09:04:01,514 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user's statement 'I need to buy this' clearly indicates an intention to purchase a product, which aligns with the 'place_order' intent. Although the specific product is not mentioned, the presence of the word 'buy' and the context of needing to purchase something strongly suggest this intent."
}
```
2025-07-07 09:04:01,515 - agent.agent - INFO - [agent.py:562] - [Multi-Agent System] Detected intent: place_order
2025-07-07 09:04:01,515 - agent.agent - INFO - [agent.py:565] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 09:04:01,515 - agent.agent - INFO - [agent.py:315] - [Function Agent] Invoking unified function agent with input: {'input': 'I need to buy this', 'intent': 'place_order'}
2025-07-07 09:04:08,032 - agent.agent - ERROR - [agent.py:367] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 09:04:08,032 - agent.agent - ERROR - [agent.py:569] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 09:04:08,033 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 09:12:03,552 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 09:12:03,565 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 09:12:03,583 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 09:12:03,589 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 09:12:06,353 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:12:06,353 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:12:06,353 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:12:06,353 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:12:06,353 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:12:06,354 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:12:06,354 - agent.agent - INFO - [agent.py:516] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:12:06,354 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:12:06,355 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:12:06,355 - agent.agent - ERROR - [agent.py:528] - [Multi-Agent System] Error creating agents: functools.partial(<function check_user_exists at 0x000001B17DEA9700>, user_id='user1') is not a module, class, method, or function.
2025-07-07 09:12:06,356 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: functools.partial(<function check_user_exists at 0x000001B17DEA9700>, user_id='user1') is not a module, class, method, or function.
2025-07-07 09:12:06,356 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 523, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 251, in create_function_agent
    StructuredTool.from_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\tools\structured.py", line 188, in from_function
    args_schema = create_schema_from_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\tools\base.py", line 316, in create_schema_from_function
    validated = validate_arguments(func, config=_SchemaConfig)  # type: ignore[operator]
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\deprecated\decorator.py", line 65, in validate_arguments
    return validate(func)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\deprecated\decorator.py", line 52, in validate
    vd = ValidatedFunction(_func, config)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\deprecated\decorator.py", line 95, in __init__
    type_hints = _typing_extra.get_type_hints(function, include_extras=True)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\_internal\_typing_extra.py", line 695, in get_type_hints
    raise TypeError(f'{obj!r} is not a module, class, method, or function.')
TypeError: functools.partial(<function check_user_exists at 0x000001B17DEA9700>, user_id='user1') is not a module, class, method, or function.
2025-07-07 09:16:05,558 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 09:16:05,573 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 09:16:05,591 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 09:16:05,597 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 09:16:05,932 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:16:05,932 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:16:05,932 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:16:05,933 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:16:05,933 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:16:05,933 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:16:05,933 - agent.agent - INFO - [agent.py:517] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:16:05,933 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:16:05,933 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:16:06,011 - agent.agent - INFO - [agent.py:375] - [Function Agent] Unified function agent created successfully
2025-07-07 09:16:06,012 - agent.agent - INFO - [agent.py:379] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 09:16:06,013 - agent.agent - INFO - [agent.py:510] - [Response Agent] Response agent created successfully
2025-07-07 09:16:06,013 - agent.agent - INFO - [agent.py:527] - [Multi-Agent System] All agents created successfully
2025-07-07 09:16:06,013 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 09:16:06,013 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 09:16:06,013 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 09:16:06,013 - agent.agent - INFO - [agent.py:539] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 09:16:06,014 - agent.agent - INFO - [agent.py:545] - [Multi-Agent System] Processing user input: I need buy this
2025-07-07 09:16:06,014 - agent.agent - INFO - [agent.py:551] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 09:16:06,014 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 09:16:06,014 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 09:16:12,193 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 09:16:18,336 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.7,
  "reasoning": "The user expresses a desire to purchase something, which aligns with the 'place_order' intent. However, the lack of specific product details or entities reduces the confidence level."
}
```
2025-07-07 09:16:18,336 - agent.agent - INFO - [agent.py:562] - [Multi-Agent System] Detected intent: place_order
2025-07-07 09:16:18,337 - agent.agent - INFO - [agent.py:565] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 09:16:18,337 - agent.agent - INFO - [agent.py:315] - [Function Agent] Invoking unified function agent with input: {'input': 'I need buy this', 'intent': 'place_order'}
2025-07-07 09:16:25,185 - agent.agent - ERROR - [agent.py:367] - [Function Agent] Error in agent execution: check_user_exists() got multiple values for argument 'user_id'
2025-07-07 09:16:25,185 - agent.agent - ERROR - [agent.py:569] - [Multi-Agent System] Function execution failed: check_user_exists() got multiple values for argument 'user_id'
2025-07-07 09:16:25,186 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 09:17:18,476 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 09:17:18,490 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 09:17:18,508 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 09:17:18,517 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 09:17:18,898 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:17:18,898 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:17:18,899 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:17:18,899 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:17:18,899 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:17:18,899 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:17:18,899 - agent.agent - INFO - [agent.py:517] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:17:18,899 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:17:18,900 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:17:18,988 - agent.agent - INFO - [agent.py:375] - [Function Agent] Unified function agent created successfully
2025-07-07 09:17:18,988 - agent.agent - INFO - [agent.py:379] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 09:17:18,989 - agent.agent - INFO - [agent.py:510] - [Response Agent] Response agent created successfully
2025-07-07 09:17:18,989 - agent.agent - INFO - [agent.py:527] - [Multi-Agent System] All agents created successfully
2025-07-07 09:17:18,989 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 09:17:18,989 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 09:17:18,989 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 09:17:18,989 - agent.agent - INFO - [agent.py:539] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 09:17:18,990 - agent.agent - INFO - [agent.py:545] - [Multi-Agent System] Processing user input: I need buy this
2025-07-07 09:17:18,990 - agent.agent - INFO - [agent.py:551] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 09:17:18,990 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 09:17:18,990 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 09:17:25,407 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 09:17:32,164 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user's statement 'I need buy this' clearly indicates a desire to purchase something, which aligns with the 'place_order' intent. Although the product is not specified, the presence of the word 'buy' strongly suggests the user's goal is to make a purchase."
}
```
2025-07-07 09:17:32,164 - agent.agent - INFO - [agent.py:562] - [Multi-Agent System] Detected intent: place_order
2025-07-07 09:17:32,164 - agent.agent - INFO - [agent.py:565] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 09:17:32,164 - agent.agent - INFO - [agent.py:315] - [Function Agent] Invoking unified function agent with input: {'input': 'I need buy this', 'intent': 'place_order'}
2025-07-07 09:17:38,446 - agent.agent - ERROR - [agent.py:367] - [Function Agent] Error in agent execution: check_user_exists() got multiple values for argument 'user_id'
2025-07-07 09:17:38,447 - agent.agent - ERROR - [agent.py:569] - [Multi-Agent System] Function execution failed: check_user_exists() got multiple values for argument 'user_id'
2025-07-07 09:17:38,447 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 09:18:03,687 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 09:18:03,701 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 09:18:03,720 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 09:18:03,727 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 09:18:04,096 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:18:04,097 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:18:04,097 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:18:04,097 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:18:04,097 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:18:04,098 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:18:04,098 - agent.agent - INFO - [agent.py:517] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:18:04,098 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:18:04,098 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:18:04,189 - agent.agent - INFO - [agent.py:375] - [Function Agent] Unified function agent created successfully
2025-07-07 09:18:04,189 - agent.agent - INFO - [agent.py:379] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 09:18:04,190 - agent.agent - INFO - [agent.py:510] - [Response Agent] Response agent created successfully
2025-07-07 09:18:04,190 - agent.agent - INFO - [agent.py:527] - [Multi-Agent System] All agents created successfully
2025-07-07 09:18:04,190 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 09:18:04,190 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 09:18:04,191 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 09:18:04,191 - agent.agent - INFO - [agent.py:539] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 09:18:04,191 - agent.agent - INFO - [agent.py:545] - [Multi-Agent System] Processing user input: I need buy this
2025-07-07 09:18:04,191 - agent.agent - INFO - [agent.py:551] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 09:18:04,191 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 09:18:04,191 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 09:18:11,977 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 09:18:18,263 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.7,
  "reasoning": "The user expresses a clear intention to purchase something, which aligns with the 'place_order' intent. However, the lack of specific product details or order-related information slightly reduces the confidence level."
}
```
2025-07-07 09:18:18,264 - agent.agent - INFO - [agent.py:562] - [Multi-Agent System] Detected intent: place_order
2025-07-07 09:18:18,265 - agent.agent - INFO - [agent.py:565] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 09:18:18,265 - agent.agent - INFO - [agent.py:315] - [Function Agent] Invoking unified function agent with input: {'input': 'I need buy this', 'intent': 'place_order'}
2025-07-07 09:18:27,849 - agent.agent - INFO - [agent.py:339] - [Function Agent] Agent execution completed
2025-07-07 09:18:27,907 - agent.agent - INFO - [agent.py:574] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 09:18:27,907 - agent.agent - INFO - [agent.py:577] - [Multi-Agent System] Step 3: Generating response
2025-07-07 09:18:27,907 - agent.agent - INFO - [agent.py:444] - [Response Agent] Processing response for seller_id: 1
2025-07-07 09:18:27,907 - agent.agent - INFO - [agent.py:449] - [Response Agent] Step 1: Determining response strategy
2025-07-07 09:18:34,318 - agent.agent - INFO - [agent.py:463] - [Response Agent] Step 2: Generating response
2025-07-07 09:18:41,883 - agent.agent - INFO - [agent.py:483] - [Response Agent] Response generation completed
2025-07-07 09:18:41,884 - agent.agent - INFO - [agent.py:591] - [Multi-Agent System] Processing completed successfully
2025-07-07 09:18:41,884 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 09:19:13,930 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:19:13,930 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:19:13,931 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:19:13,931 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:19:13,931 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:19:13,931 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:19:13,931 - agent.agent - INFO - [agent.py:517] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:19:13,931 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:19:13,933 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:19:14,013 - agent.agent - INFO - [agent.py:375] - [Function Agent] Unified function agent created successfully
2025-07-07 09:19:14,014 - agent.agent - INFO - [agent.py:379] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 09:19:14,014 - agent.agent - INFO - [agent.py:510] - [Response Agent] Response agent created successfully
2025-07-07 09:19:14,014 - agent.agent - INFO - [agent.py:527] - [Multi-Agent System] All agents created successfully
2025-07-07 09:19:14,015 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 09:19:14,015 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 09:19:14,015 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 09:19:14,015 - agent.agent - INFO - [agent.py:539] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 09:19:14,015 - agent.agent - INFO - [agent.py:545] - [Multi-Agent System] Processing user input: can you check im vailable at the database ?
2025-07-07 09:19:14,015 - agent.agent - INFO - [agent.py:551] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 09:19:14,016 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 09:19:14,016 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 09:19:20,416 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 09:19:28,270 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "user_management",
  "confidence": 0.8,
  "reasoning": "The user is asking to check their availability in the database, which pertains to verifying their user information or status. This aligns with the 'user_management' intent, as it involves managing or querying user-related data. The context mentions a seller ID, further supporting this classification."
}
```
2025-07-07 09:19:28,271 - agent.agent - INFO - [agent.py:562] - [Multi-Agent System] Detected intent: user_management
2025-07-07 09:19:28,271 - agent.agent - INFO - [agent.py:565] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 09:19:28,271 - agent.agent - INFO - [agent.py:315] - [Function Agent] Invoking unified function agent with input: {'input': 'can you check im vailable at the database ?', 'intent': 'user_management'}
2025-07-07 09:19:51,833 - agent.agent - INFO - [agent.py:339] - [Function Agent] Agent execution completed
2025-07-07 09:19:51,835 - agent.agent - INFO - [agent.py:574] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 09:19:51,835 - agent.agent - INFO - [agent.py:577] - [Multi-Agent System] Step 3: Generating response
2025-07-07 09:19:51,835 - agent.agent - INFO - [agent.py:444] - [Response Agent] Processing response for seller_id: 1
2025-07-07 09:19:51,836 - agent.agent - INFO - [agent.py:449] - [Response Agent] Step 1: Determining response strategy
2025-07-07 09:19:56,336 - agent.agent - INFO - [agent.py:463] - [Response Agent] Step 2: Generating response
2025-07-07 09:20:02,102 - agent.agent - INFO - [agent.py:483] - [Response Agent] Response generation completed
2025-07-07 09:20:02,102 - agent.agent - INFO - [agent.py:591] - [Multi-Agent System] Processing completed successfully
2025-07-07 09:20:02,102 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 09:20:33,778 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:20:33,779 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:20:33,779 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:20:33,779 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:20:33,779 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:20:33,780 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:20:33,780 - agent.agent - INFO - [agent.py:517] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:20:33,780 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:20:33,781 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:20:33,933 - agent.agent - INFO - [agent.py:375] - [Function Agent] Unified function agent created successfully
2025-07-07 09:20:33,933 - agent.agent - INFO - [agent.py:379] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 09:20:33,933 - agent.agent - INFO - [agent.py:510] - [Response Agent] Response agent created successfully
2025-07-07 09:20:33,933 - agent.agent - INFO - [agent.py:527] - [Multi-Agent System] All agents created successfully
2025-07-07 09:20:33,933 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 09:20:33,934 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 09:20:33,934 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 09:20:33,934 - agent.agent - INFO - [agent.py:539] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 09:20:33,934 - agent.agent - INFO - [agent.py:545] - [Multi-Agent System] Processing user input: i need 2 items
2025-07-07 09:20:33,934 - agent.agent - INFO - [agent.py:551] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 09:20:33,934 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 09:20:33,935 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 09:20:39,633 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 09:20:47,019 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.7,
  "reasoning": "The user mentions needing '2 items', which suggests an intention to purchase or order products. While the user hasn't specified the product names, the context of requesting items aligns most closely with the 'place_order' intent. The confidence is not higher due to the lack of specific product details."
}
```
2025-07-07 09:20:47,020 - agent.agent - INFO - [agent.py:562] - [Multi-Agent System] Detected intent: place_order
2025-07-07 09:20:47,020 - agent.agent - INFO - [agent.py:565] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 09:20:47,020 - agent.agent - INFO - [agent.py:315] - [Function Agent] Invoking unified function agent with input: {'input': 'i need 2 items', 'intent': 'place_order'}
2025-07-07 09:21:12,904 - agent.agent - ERROR - [agent.py:367] - [Function Agent] Error in agent execution: place_order() got multiple values for argument 'seller_id'
2025-07-07 09:21:12,904 - agent.agent - ERROR - [agent.py:569] - [Multi-Agent System] Function execution failed: place_order() got multiple values for argument 'seller_id'
2025-07-07 09:21:12,904 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 09:21:59,938 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 09:21:59,953 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 09:21:59,971 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 09:21:59,978 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 09:22:00,584 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 09:22:00,584 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 09:22:00,584 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 09:22:00,585 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 09:22:00,585 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 09:22:00,585 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 09:22:00,586 - agent.agent - INFO - [agent.py:517] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 09:22:00,586 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 09:22:00,586 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 09:22:00,668 - agent.agent - INFO - [agent.py:375] - [Function Agent] Unified function agent created successfully
2025-07-07 09:22:00,670 - agent.agent - INFO - [agent.py:379] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 09:22:00,670 - agent.agent - INFO - [agent.py:510] - [Response Agent] Response agent created successfully
2025-07-07 09:22:00,671 - agent.agent - INFO - [agent.py:527] - [Multi-Agent System] All agents created successfully
2025-07-07 09:22:00,671 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 09:22:00,671 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 09:22:00,671 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 09:22:00,671 - agent.agent - INFO - [agent.py:539] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 09:22:00,672 - agent.agent - INFO - [agent.py:545] - [Multi-Agent System] Processing user input: i need 2 items
2025-07-07 09:22:00,672 - agent.agent - INFO - [agent.py:551] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 09:22:00,672 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 09:22:00,672 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 09:22:06,204 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 09:22:13,350 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user's request for '2 items' suggests an intention to purchase or order something, which aligns with the 'place_order' intent. The lack of specific product details or user information indicates a general order request rather than a query about product information or tracking an existing order."
}
```
2025-07-07 09:22:13,351 - agent.agent - INFO - [agent.py:562] - [Multi-Agent System] Detected intent: place_order
2025-07-07 09:22:13,351 - agent.agent - INFO - [agent.py:565] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 09:22:13,351 - agent.agent - INFO - [agent.py:315] - [Function Agent] Invoking unified function agent with input: {'input': 'i need 2 items', 'intent': 'place_order'}
2025-07-07 09:22:20,822 - agent.agent - ERROR - [agent.py:367] - [Function Agent] Error in agent execution: place_order() missing 2 required positional arguments: 'user_id' and 'items'
2025-07-07 09:22:20,822 - agent.agent - ERROR - [agent.py:569] - [Multi-Agent System] Function execution failed: place_order() missing 2 required positional arguments: 'user_id' and 'items'
2025-07-07 09:22:20,822 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 13:36:03,491 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:36:03,508 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:36:03,532 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:36:03,541 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:36:48,703 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:36:48,720 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:36:48,743 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:36:48,752 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:39:49,210 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:39:49,225 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:39:49,466 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:39:49,472 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:39:49,854 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 13:39:49,855 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 13:39:49,855 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 13:39:49,855 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 13:39:49,855 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 13:39:49,856 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 13:39:49,856 - agent.agent - INFO - [agent.py:574] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 13:39:49,856 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 13:39:49,856 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 13:39:49,861 - agent.agent - ERROR - [agent.py:586] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:39:49,862 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:39:49,862 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 581, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 321, in create_function_agent
    llm_with_tools = llm.bind_tools(function_tools)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1578, in bind_tools
    formatted_tools = [
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1579, in <listcomp>
    convert_to_openai_tool(tool, strict=strict) for tool in tools
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:40:08,365 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:40:08,378 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:40:08,396 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:40:08,403 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:40:14,644 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 13:40:14,644 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 13:40:14,645 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 13:40:14,645 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 13:40:14,645 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 13:40:14,645 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 13:40:14,645 - agent.agent - INFO - [agent.py:574] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 13:40:14,646 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 13:40:14,646 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 13:40:14,650 - agent.agent - ERROR - [agent.py:586] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:40:14,650 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:40:14,651 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 581, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 321, in create_function_agent
    llm_with_tools = llm.bind_tools(function_tools)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1578, in bind_tools
    formatted_tools = [
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1579, in <listcomp>
    convert_to_openai_tool(tool, strict=strict) for tool in tools
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:50:35,554 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:50:35,572 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:50:35,592 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:50:35,600 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:50:37,426 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 13:50:37,426 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 13:50:37,426 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 13:50:37,426 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 13:50:37,426 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 13:50:37,427 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 13:50:37,427 - agent.agent - INFO - [agent.py:589] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 13:50:37,427 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 13:50:37,431 - agent.agent - ERROR - [agent.py:601] - [Multi-Agent System] Error creating agents: unsupported operand type(s) for |: 'type' and 'NoneType'
2025-07-07 13:50:37,431 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: unsupported operand type(s) for |: 'type' and 'NoneType'
2025-07-07 13:50:37,431 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 596, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 239, in create_function_agent
    class UpdateUserInfoInput(BaseModel):
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 240, in UpdateUserInfoInput
    name: str | None = Field(description="User's full name", default=None)
TypeError: unsupported operand type(s) for |: 'type' and 'NoneType'
2025-07-07 13:52:33,719 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:52:33,736 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:52:33,758 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:52:33,766 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:52:42,045 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:52:42,060 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:52:42,078 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:52:42,085 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:52:48,275 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:52:48,289 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:52:48,311 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:52:48,319 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:52:55,005 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:52:55,023 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:52:55,044 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:52:55,054 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:53:44,380 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:53:44,396 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:53:44,415 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:53:44,423 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:53:51,500 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 13:53:51,500 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 13:53:51,501 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 13:53:51,501 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 13:53:51,501 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 13:53:51,501 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 13:53:51,502 - agent.agent - INFO - [agent.py:589] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 13:53:51,502 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 13:53:51,508 - agent.agent - ERROR - [agent.py:330] - [Function Agent] Error binding tools to LLM: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:53:51,508 - agent.agent - ERROR - [agent.py:601] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:53:51,508 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:53:51,509 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 596, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 327, in create_function_agent
    llm_with_tools = llm.bind_tools(function_tools)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1578, in bind_tools
    formatted_tools = [
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1579, in <listcomp>
    convert_to_openai_tool(tool, strict=strict) for tool in tools
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:54:27,913 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:54:27,928 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:54:27,948 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:54:27,955 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:54:37,558 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:54:37,572 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:54:37,592 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:54:37,600 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:54:47,168 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:54:47,181 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:54:47,200 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:54:47,207 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:54:59,407 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:54:59,423 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:54:59,506 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:54:59,512 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:55:14,155 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:55:14,171 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:55:14,256 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:55:14,263 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:55:14,645 - agent.agent - INFO - [agent.py:594] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 13:55:14,646 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 13:55:14,652 - agent.agent - ERROR - [agent.py:335] - [Function Agent] Error binding tools to LLM: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:55:14,652 - agent.agent - ERROR - [agent.py:606] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:55:48,327 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:55:48,342 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:55:48,361 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:55:48,369 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:55:58,576 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:55:58,593 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:55:58,615 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:55:58,624 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:56:07,028 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:56:07,043 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:56:07,063 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:56:07,072 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:56:19,360 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:56:19,374 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:56:19,458 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:56:19,465 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:56:19,848 - agent.agent - INFO - [agent.py:594] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 13:56:19,848 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 13:56:19,854 - agent.agent - ERROR - [agent.py:335] - [Function Agent] Error binding tools to LLM: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:56:19,854 - agent.agent - ERROR - [agent.py:606] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:56:37,259 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:56:37,274 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:56:37,293 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:56:37,301 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:56:46,606 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:56:46,620 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:56:46,641 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:56:46,647 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:56:54,535 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:56:54,551 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:56:54,571 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:56:54,579 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:57:07,888 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:57:07,902 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:57:07,923 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:57:07,929 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:57:18,038 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:57:18,052 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:57:18,135 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:57:18,143 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:57:18,523 - agent.agent - INFO - [agent.py:599] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 13:57:18,524 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 13:57:18,529 - agent.agent - ERROR - [agent.py:340] - [Function Agent] Error binding tools to LLM: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:57:18,529 - agent.agent - ERROR - [agent.py:611] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 13:57:50,158 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:57:50,174 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:57:50,194 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:57:50,201 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:58:07,228 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:58:07,245 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:58:07,333 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:58:07,342 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:58:46,658 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:58:46,673 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:58:46,693 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:58:46,700 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 13:59:12,228 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 13:59:12,244 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 13:59:12,268 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 13:59:12,292 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:01:11,188 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:01:11,204 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:01:11,284 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:01:11,290 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:01:11,671 - agent.agent - INFO - [agent.py:560] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 14:01:11,671 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 14:01:11,717 - agent.agent - INFO - [agent.py:418] - [Function Agent] Unified function agent created successfully
2025-07-07 14:01:11,718 - agent.agent - INFO - [agent.py:422] - [Response Agent] Creating response agent for seller_id: test_seller
2025-07-07 14:01:11,718 - agent.agent - INFO - [agent.py:553] - [Response Agent] Response agent created successfully
2025-07-07 14:01:11,718 - agent.agent - INFO - [agent.py:570] - [Multi-Agent System] All agents created successfully
2025-07-07 14:01:38,475 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:01:38,490 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:01:38,574 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:01:38,580 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:01:38,966 - agent.agent - INFO - [agent.py:560] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 14:01:38,966 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 14:01:39,011 - agent.agent - INFO - [agent.py:418] - [Function Agent] Unified function agent created successfully
2025-07-07 14:01:39,011 - agent.agent - INFO - [agent.py:422] - [Response Agent] Creating response agent for seller_id: test_seller
2025-07-07 14:01:39,012 - agent.agent - INFO - [agent.py:553] - [Response Agent] Response agent created successfully
2025-07-07 14:01:39,012 - agent.agent - INFO - [agent.py:570] - [Multi-Agent System] All agents created successfully
2025-07-07 14:01:39,012 - agent.agent - INFO - [agent.py:582] - [Multi-Agent System] Starting processing for seller_id: test_seller, user_id: test_user
2025-07-07 14:01:39,014 - agent.agent - INFO - [agent.py:588] - [Multi-Agent System] Processing user input: Hello, can you help me?
2025-07-07 14:01:39,014 - agent.agent - INFO - [agent.py:594] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:01:39,014 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: test_seller
2025-07-07 14:01:39,014 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:01:45,173 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:01:52,422 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "general_inquiry",
  "confidence": 0.8,
  "reasoning": "The user's request for help is very general and lacks specific details about products, orders, or user management, making 'general_inquiry' the most likely intent."
}
```
2025-07-07 14:01:52,422 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Detected intent: general_inquiry
2025-07-07 14:01:52,422 - agent.agent - INFO - [agent.py:608] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:01:52,423 - agent.agent - INFO - [agent.py:359] - [Function Agent] Invoking unified function agent with input: {'input': 'Hello, can you help me?', 'intent': 'general_inquiry'}
2025-07-07 14:01:52,425 - langchain_core.callbacks.manager - WARNING - [manager.py:297] - Error in function.on_chain_start callback: AttributeError("'function' object has no attribute 'ignore_chain'")
2025-07-07 14:01:52,425 - agent.agent - ERROR - [agent.py:410] - [Function Agent] Error in agent execution: 'function' object has no attribute 'raise_error'
2025-07-07 14:01:52,425 - agent.agent - ERROR - [agent.py:612] - [Multi-Agent System] Function execution failed: 'function' object has no attribute 'raise_error'
2025-07-07 14:02:11,259 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:02:11,273 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:02:11,290 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:02:11,297 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:03:56,881 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:03:56,883 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:03:56,883 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:03:56,883 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:03:56,883 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:03:56,884 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:03:56,884 - agent.agent - INFO - [agent.py:560] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:03:56,884 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:03:56,935 - agent.agent - INFO - [agent.py:418] - [Function Agent] Unified function agent created successfully
2025-07-07 14:03:56,935 - agent.agent - INFO - [agent.py:422] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 14:03:56,936 - agent.agent - INFO - [agent.py:553] - [Response Agent] Response agent created successfully
2025-07-07 14:03:56,936 - agent.agent - INFO - [agent.py:570] - [Multi-Agent System] All agents created successfully
2025-07-07 14:03:56,936 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 14:03:56,936 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 14:03:56,936 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 14:03:56,936 - agent.agent - INFO - [agent.py:582] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 14:03:56,936 - agent.agent - INFO - [agent.py:588] - [Multi-Agent System] Processing user input: hi
2025-07-07 14:03:56,937 - agent.agent - INFO - [agent.py:594] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:03:56,937 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 14:03:56,937 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:04:04,081 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:04:11,548 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "general_inquiry",
  "confidence": 0.9,
  "reasoning": "The user's greeting 'hi' does not provide specific information related to products, orders, or user management. It is a general greeting, indicating a likely intent for general inquiry or starting a conversation."
}
```
2025-07-07 14:04:11,549 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Detected intent: general_inquiry
2025-07-07 14:04:11,549 - agent.agent - INFO - [agent.py:608] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:04:11,549 - agent.agent - INFO - [agent.py:359] - [Function Agent] Invoking unified function agent with input: {'input': 'hi', 'intent': 'general_inquiry'}
2025-07-07 14:04:11,550 - langchain_core.callbacks.manager - WARNING - [manager.py:297] - Error in function.on_chain_start callback: AttributeError("'function' object has no attribute 'ignore_chain'")
2025-07-07 14:04:11,551 - agent.agent - ERROR - [agent.py:410] - [Function Agent] Error in agent execution: 'function' object has no attribute 'raise_error'
2025-07-07 14:04:11,551 - agent.agent - ERROR - [agent.py:612] - [Multi-Agent System] Function execution failed: 'function' object has no attribute 'raise_error'
2025-07-07 14:04:11,551 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 14:07:45,068 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:07:45,082 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:07:45,103 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:07:45,109 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:08:20,937 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:08:20,951 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:08:20,970 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:08:20,978 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:08:24,108 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:08:24,108 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:08:24,109 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:08:24,109 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:08:24,109 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:08:24,109 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:08:24,110 - agent.agent - INFO - [agent.py:560] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:08:24,110 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:08:24,153 - agent.agent - INFO - [agent.py:418] - [Function Agent] Unified function agent created successfully
2025-07-07 14:08:24,153 - agent.agent - INFO - [agent.py:422] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 14:08:24,154 - agent.agent - INFO - [agent.py:553] - [Response Agent] Response agent created successfully
2025-07-07 14:08:24,154 - agent.agent - INFO - [agent.py:570] - [Multi-Agent System] All agents created successfully
2025-07-07 14:08:24,154 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 14:08:24,154 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 14:08:24,155 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 14:08:24,155 - agent.agent - INFO - [agent.py:582] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 14:08:24,155 - agent.agent - INFO - [agent.py:588] - [Multi-Agent System] Processing user input: hi
2025-07-07 14:08:24,155 - agent.agent - INFO - [agent.py:594] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:08:24,155 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 14:08:24,156 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:08:30,634 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:08:37,790 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "general_inquiry",
  "confidence": 0.9,
  "reasoning": "The user greeted the system without mentioning any specific products, orders, or user information, which suggests a general inquiry or interaction rather than a specific request related to products, orders, or user management."
}
```
2025-07-07 14:08:37,790 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Detected intent: general_inquiry
2025-07-07 14:08:37,791 - agent.agent - INFO - [agent.py:608] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:08:37,791 - agent.agent - INFO - [agent.py:359] - [Function Agent] Invoking unified function agent with input: {'input': 'hi', 'intent': 'general_inquiry'}
2025-07-07 14:08:44,288 - agent.agent - INFO - [agent.py:383] - [Function Agent] Agent execution completed
2025-07-07 14:08:44,344 - agent.agent - INFO - [agent.py:617] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 14:08:44,344 - agent.agent - INFO - [agent.py:620] - [Multi-Agent System] Step 3: Generating response
2025-07-07 14:08:44,344 - agent.agent - INFO - [agent.py:487] - [Response Agent] Processing response for seller_id: 1
2025-07-07 14:08:44,344 - agent.agent - INFO - [agent.py:492] - [Response Agent] Step 1: Determining response strategy
2025-07-07 14:08:49,722 - agent.agent - INFO - [agent.py:506] - [Response Agent] Step 2: Generating response
2025-07-07 14:08:59,324 - agent.agent - INFO - [agent.py:526] - [Response Agent] Response generation completed
2025-07-07 14:08:59,325 - agent.agent - INFO - [agent.py:634] - [Multi-Agent System] Processing completed successfully
2025-07-07 14:08:59,325 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 14:09:14,970 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:09:14,970 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:09:14,971 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:09:14,971 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:09:14,971 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:09:14,971 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:09:14,971 - agent.agent - INFO - [agent.py:560] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:09:14,972 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:09:15,023 - agent.agent - INFO - [agent.py:418] - [Function Agent] Unified function agent created successfully
2025-07-07 14:09:15,023 - agent.agent - INFO - [agent.py:422] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 14:09:15,024 - agent.agent - INFO - [agent.py:553] - [Response Agent] Response agent created successfully
2025-07-07 14:09:15,024 - agent.agent - INFO - [agent.py:570] - [Multi-Agent System] All agents created successfully
2025-07-07 14:09:15,025 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 14:09:15,025 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 14:09:15,025 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 14:09:15,025 - agent.agent - INFO - [agent.py:582] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 14:09:15,025 - agent.agent - INFO - [agent.py:588] - [Multi-Agent System] Processing user input: i need wireless mouse
2025-07-07 14:09:15,025 - agent.agent - INFO - [agent.py:594] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:09:15,025 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 14:09:15,026 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:09:22,253 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:09:29,856 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "product_info",
  "confidence": 0.9,
  "reasoning": "The user is inquiring about a specific product, a 'wireless mouse', which aligns with the 'product_info' intent. The context and entities clearly indicate a need for information about a product rather than an order-related or user management request."
}
```
2025-07-07 14:09:29,857 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Detected intent: product_info
2025-07-07 14:09:29,857 - agent.agent - INFO - [agent.py:608] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:09:29,857 - agent.agent - INFO - [agent.py:359] - [Function Agent] Invoking unified function agent with input: {'input': 'i need wireless mouse', 'intent': 'product_info'}
2025-07-07 14:09:42,779 - agent.agent - INFO - [agent.py:383] - [Function Agent] Agent execution completed
2025-07-07 14:09:42,782 - agent.agent - INFO - [agent.py:617] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 14:09:42,782 - agent.agent - INFO - [agent.py:620] - [Multi-Agent System] Step 3: Generating response
2025-07-07 14:09:42,782 - agent.agent - INFO - [agent.py:487] - [Response Agent] Processing response for seller_id: 1
2025-07-07 14:09:42,783 - agent.agent - INFO - [agent.py:492] - [Response Agent] Step 1: Determining response strategy
2025-07-07 14:09:48,969 - agent.agent - INFO - [agent.py:506] - [Response Agent] Step 2: Generating response
2025-07-07 14:09:58,277 - agent.agent - INFO - [agent.py:526] - [Response Agent] Response generation completed
2025-07-07 14:09:58,278 - agent.agent - INFO - [agent.py:634] - [Multi-Agent System] Processing completed successfully
2025-07-07 14:09:58,278 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 14:10:09,191 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:10:09,192 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:10:09,192 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:10:09,192 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:10:09,192 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:10:09,193 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:10:09,193 - agent.agent - INFO - [agent.py:560] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:10:09,193 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:10:09,233 - agent.agent - INFO - [agent.py:418] - [Function Agent] Unified function agent created successfully
2025-07-07 14:10:09,234 - agent.agent - INFO - [agent.py:422] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 14:10:09,235 - agent.agent - INFO - [agent.py:553] - [Response Agent] Response agent created successfully
2025-07-07 14:10:09,236 - agent.agent - INFO - [agent.py:570] - [Multi-Agent System] All agents created successfully
2025-07-07 14:10:09,236 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 14:10:09,236 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 14:10:09,236 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 14:10:09,236 - agent.agent - INFO - [agent.py:582] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 14:10:09,236 - agent.agent - INFO - [agent.py:588] - [Multi-Agent System] Processing user input: i need to buy one of these
2025-07-07 14:10:09,237 - agent.agent - INFO - [agent.py:594] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:10:09,237 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 14:10:09,237 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:10:17,417 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:10:25,057 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user is expressing a need to purchase an item, which directly aligns with the 'place_order' intent. Although the exact product is unspecified, the context indicates a clear intention to buy something, hence the high confidence in this classification."
}
```
2025-07-07 14:10:25,057 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Detected intent: place_order
2025-07-07 14:10:25,058 - agent.agent - INFO - [agent.py:608] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:10:25,058 - agent.agent - INFO - [agent.py:359] - [Function Agent] Invoking unified function agent with input: {'input': 'i need to buy one of these', 'intent': 'place_order'}
2025-07-07 14:10:30,148 - agent.agent - ERROR - [agent.py:410] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:10:30,149 - agent.agent - ERROR - [agent.py:612] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:10:30,149 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 14:12:04,054 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:12:04,068 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:12:04,089 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:12:04,097 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:12:56,092 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:12:56,110 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:12:56,129 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:12:56,135 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:13:01,097 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:13:01,097 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:13:01,097 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:13:01,097 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:13:01,097 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:13:01,098 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:13:01,098 - agent.agent - INFO - [agent.py:560] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:13:01,098 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:13:01,127 - agent.agent - ERROR - [agent.py:343] - [Function Agent] Error creating agent: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:13:01,127 - agent.agent - ERROR - [agent.py:572] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:13:01,128 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:13:01,128 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 567, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 340, in create_function_agent
    agent = create_openai_tools_agent(llm, function_tools, prompt)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain\agents\openai_tools\base.py", line 95, in create_openai_tools_agent
    tools=[convert_to_openai_tool(tool, strict=strict) for tool in tools]
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain\agents\openai_tools\base.py", line 95, in <listcomp>
    tools=[convert_to_openai_tool(tool, strict=strict) for tool in tools]
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:13:32,907 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:13:32,925 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:13:32,948 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:13:32,958 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:24:20,302 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:24:20,317 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:24:20,338 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:24:20,346 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:24:20,747 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:24:20,748 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:24:20,748 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:24:20,748 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:24:20,748 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:24:20,749 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:24:20,749 - agent.agent - INFO - [agent.py:560] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:24:20,749 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:24:20,795 - agent.agent - INFO - [agent.py:418] - [Function Agent] Unified function agent created successfully
2025-07-07 14:24:20,795 - agent.agent - INFO - [agent.py:422] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 14:24:20,796 - agent.agent - INFO - [agent.py:553] - [Response Agent] Response agent created successfully
2025-07-07 14:24:20,797 - agent.agent - INFO - [agent.py:570] - [Multi-Agent System] All agents created successfully
2025-07-07 14:24:20,797 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 14:24:20,797 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 14:24:20,797 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 14:24:20,797 - agent.agent - INFO - [agent.py:582] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 14:24:20,797 - agent.agent - INFO - [agent.py:588] - [Multi-Agent System] Processing user input: i need to buy one of these
2025-07-07 14:24:20,797 - agent.agent - INFO - [agent.py:594] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:24:20,798 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 14:24:20,798 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:24:31,255 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:24:39,376 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.9,
  "reasoning": "The user's statement 'i need to buy one of these' clearly indicates a desire to purchase an item, which aligns with the 'place_order' intent. The context summary confirms this by stating the user is expressing a desire to purchase an unspecified item. Although the product is not specified, the intent to make a purchase is clear."
}
```
2025-07-07 14:24:39,377 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Detected intent: place_order
2025-07-07 14:24:39,377 - agent.agent - INFO - [agent.py:608] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:24:39,377 - agent.agent - INFO - [agent.py:359] - [Function Agent] Invoking unified function agent with input: {'input': 'i need to buy one of these', 'intent': 'place_order'}
2025-07-07 14:24:44,396 - agent.agent - ERROR - [agent.py:410] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:24:44,396 - agent.agent - ERROR - [agent.py:612] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:24:44,397 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 14:26:20,157 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:26:20,177 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:26:20,197 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:26:20,204 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:28:04,060 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:28:04,074 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:28:04,093 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:28:04,100 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:28:04,465 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:28:04,465 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:28:04,465 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:28:04,466 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:28:04,466 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:28:04,466 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:28:04,466 - agent.agent - INFO - [agent.py:560] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:28:04,466 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:28:04,511 - agent.agent - INFO - [agent.py:418] - [Function Agent] Unified function agent created successfully
2025-07-07 14:28:04,512 - agent.agent - INFO - [agent.py:422] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 14:28:04,512 - agent.agent - INFO - [agent.py:553] - [Response Agent] Response agent created successfully
2025-07-07 14:28:04,512 - agent.agent - INFO - [agent.py:570] - [Multi-Agent System] All agents created successfully
2025-07-07 14:28:04,513 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 14:28:04,513 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 14:28:04,513 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 14:28:04,513 - agent.agent - INFO - [agent.py:582] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 14:28:04,513 - agent.agent - INFO - [agent.py:588] - [Multi-Agent System] Processing user input: i need to buy one of these
2025-07-07 14:28:04,514 - agent.agent - INFO - [agent.py:594] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:28:04,514 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 14:28:04,514 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:28:11,031 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:28:20,180 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user's statement 'i need to buy one of these' clearly indicates an intention to make a purchase, which aligns with the 'place_order' intent. The mention of 'one of these' suggests the user is referring to a specific product, even though the product is not named, reinforcing the likelihood of this intent. The confidence is not 1.0 because the product is unspecified, which could slightly obscure the intent."
}
```
2025-07-07 14:28:20,181 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Detected intent: place_order
2025-07-07 14:28:20,181 - agent.agent - INFO - [agent.py:608] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:28:20,182 - agent.agent - INFO - [agent.py:359] - [Function Agent] Invoking unified function agent with input: {'input': 'i need to buy one of these', 'intent': 'place_order'}
2025-07-07 14:28:25,353 - agent.agent - ERROR - [agent.py:410] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:28:25,354 - agent.agent - ERROR - [agent.py:612] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:28:25,354 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 14:29:50,127 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:29:50,142 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:29:50,162 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:29:50,172 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:30:09,333 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:30:09,358 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:30:09,386 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:30:09,396 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:30:09,726 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:30:09,727 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:30:09,727 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:30:09,727 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:30:09,727 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:30:09,728 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:30:09,728 - agent.agent - INFO - [agent.py:560] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:30:09,728 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:30:09,770 - agent.agent - INFO - [agent.py:418] - [Function Agent] Unified function agent created successfully
2025-07-07 14:30:09,770 - agent.agent - INFO - [agent.py:422] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 14:30:09,771 - agent.agent - INFO - [agent.py:553] - [Response Agent] Response agent created successfully
2025-07-07 14:30:09,771 - agent.agent - INFO - [agent.py:570] - [Multi-Agent System] All agents created successfully
2025-07-07 14:30:09,771 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 14:30:09,771 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 14:30:09,771 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 14:30:09,772 - agent.agent - INFO - [agent.py:582] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 14:30:09,772 - agent.agent - INFO - [agent.py:588] - [Multi-Agent System] Processing user input: i need to buy one of these
2025-07-07 14:30:09,772 - agent.agent - INFO - [agent.py:594] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:30:09,772 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 14:30:09,772 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:30:19,769 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:30:26,216 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user is expressing a clear intention to purchase an item, which aligns with the 'place_order' intent. Although the specific product is not mentioned, the context indicates a purchasing need."
}
```
2025-07-07 14:30:26,216 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Detected intent: place_order
2025-07-07 14:30:26,217 - agent.agent - INFO - [agent.py:608] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:30:26,217 - agent.agent - INFO - [agent.py:359] - [Function Agent] Invoking unified function agent with input: {'input': 'i need to buy one of these', 'intent': 'place_order'}
2025-07-07 14:30:33,581 - agent.agent - ERROR - [agent.py:410] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:30:33,581 - agent.agent - ERROR - [agent.py:612] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:30:33,581 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 14:31:33,174 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:31:33,194 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:31:33,217 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:31:33,228 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:32:03,012 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:32:03,025 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:32:03,042 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:32:03,050 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:32:03,380 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:32:03,406 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:32:03,408 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:32:03,408 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:32:03,408 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:32:03,408 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:32:03,408 - agent.agent - INFO - [agent.py:598] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:32:03,408 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:32:03,413 - agent.agent - ERROR - [agent.py:381] - [Function Agent] Error creating agent: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:32:03,414 - agent.agent - ERROR - [agent.py:610] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:32:03,414 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:32:03,414 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 605, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 378, in create_function_agent
    agent = create_openai_tools_agent(llm, function_tools, prompt)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain\agents\openai_tools\base.py", line 95, in create_openai_tools_agent
    tools=[convert_to_openai_tool(tool, strict=strict) for tool in tools]
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain\agents\openai_tools\base.py", line 95, in <listcomp>
    tools=[convert_to_openai_tool(tool, strict=strict) for tool in tools]
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:32:53,036 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:32:53,050 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:32:53,072 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:32:53,080 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:33:21,945 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:33:21,962 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:33:21,982 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:33:21,990 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:33:27,980 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:33:27,981 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:33:27,981 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:33:27,981 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:33:27,981 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:33:27,982 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:33:27,982 - agent.agent - INFO - [agent.py:597] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:33:27,982 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:33:27,987 - agent.agent - ERROR - [agent.py:380] - [Function Agent] Error creating agent: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:33:27,987 - agent.agent - ERROR - [agent.py:609] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:33:27,987 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:33:27,987 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 604, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 377, in create_function_agent
    agent = create_openai_tools_agent(llm, function_tools, prompt)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain\agents\openai_tools\base.py", line 95, in create_openai_tools_agent
    tools=[convert_to_openai_tool(tool, strict=strict) for tool in tools]
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain\agents\openai_tools\base.py", line 95, in <listcomp>
    tools=[convert_to_openai_tool(tool, strict=strict) for tool in tools]
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:34:05,499 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:34:05,515 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:34:05,534 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:34:05,543 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:34:29,331 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:34:29,347 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:34:29,368 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:34:29,374 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:34:44,414 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:34:44,428 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:34:44,446 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:34:44,454 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:34:44,783 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:34:44,783 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:34:44,783 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:34:44,784 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:34:44,784 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:34:44,784 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:34:44,784 - agent.agent - INFO - [agent.py:600] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:34:44,784 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:34:44,789 - agent.agent - ERROR - [agent.py:380] - [Function Agent] Error creating agent: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:34:44,789 - agent.agent - ERROR - [agent.py:612] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:34:44,789 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:34:44,790 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 607, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 377, in create_function_agent
    agent = create_openai_tools_agent(llm, function_tools, prompt)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain\agents\openai_tools\base.py", line 95, in create_openai_tools_agent
    tools=[convert_to_openai_tool(tool, strict=strict) for tool in tools]
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain\agents\openai_tools\base.py", line 95, in <listcomp>
    tools=[convert_to_openai_tool(tool, strict=strict) for tool in tools]
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:35:15,821 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:35:15,837 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:35:15,921 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:35:15,928 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:35:41,166 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:35:41,181 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:35:41,272 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:35:41,280 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:35:41,699 - agent.agent - INFO - [agent.py:600] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 14:35:41,699 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 14:35:41,703 - agent.agent - ERROR - [agent.py:380] - [Function Agent] Error creating agent: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:35:41,704 - agent.agent - ERROR - [agent.py:612] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 14:36:17,422 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:36:17,439 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:36:17,459 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:36:17,467 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:36:34,477 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:36:34,491 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:36:34,512 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:36:34,519 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:36:49,216 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:36:49,233 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:36:49,252 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:36:49,259 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:37:03,432 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:37:03,446 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:37:03,530 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:37:03,537 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:37:03,946 - agent.agent - INFO - [agent.py:577] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 14:37:03,947 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 14:37:03,992 - agent.agent - INFO - [agent.py:435] - [Function Agent] Unified function agent created successfully
2025-07-07 14:37:03,992 - agent.agent - INFO - [agent.py:439] - [Response Agent] Creating response agent for seller_id: test_seller
2025-07-07 14:37:03,993 - agent.agent - INFO - [agent.py:570] - [Response Agent] Response agent created successfully
2025-07-07 14:37:03,993 - agent.agent - INFO - [agent.py:587] - [Multi-Agent System] All agents created successfully
2025-07-07 14:37:22,337 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:37:22,352 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:37:22,438 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:37:22,444 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:37:22,811 - agent.agent - INFO - [agent.py:577] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 14:37:22,811 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 14:37:22,857 - agent.agent - INFO - [agent.py:435] - [Function Agent] Unified function agent created successfully
2025-07-07 14:37:22,858 - agent.agent - INFO - [agent.py:439] - [Response Agent] Creating response agent for seller_id: test_seller
2025-07-07 14:37:22,858 - agent.agent - INFO - [agent.py:570] - [Response Agent] Response agent created successfully
2025-07-07 14:37:22,858 - agent.agent - INFO - [agent.py:587] - [Multi-Agent System] All agents created successfully
2025-07-07 14:37:22,859 - agent.agent - INFO - [agent.py:599] - [Multi-Agent System] Starting processing for seller_id: test_seller, user_id: test_user
2025-07-07 14:37:22,859 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Processing user input: check if user exists
2025-07-07 14:37:22,859 - agent.agent - INFO - [agent.py:611] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:37:22,859 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: test_seller
2025-07-07 14:37:22,859 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:37:29,534 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:37:37,351 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "user_management",
  "confidence": 0.9,
  "reasoning": "The user is inquiring about the existence of a seller with the ID 'test_seller', which directly relates to managing or verifying user information. This falls under the 'user_management' intent as it involves checking the status or existence of a user within the system."
}
```
2025-07-07 14:37:37,352 - agent.agent - INFO - [agent.py:622] - [Multi-Agent System] Detected intent: user_management
2025-07-07 14:37:37,352 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:37:37,352 - agent.agent - INFO - [agent.py:376] - [Function Agent] Invoking unified function agent with input: {'input': 'check if user exists', 'intent': 'user_management'}
2025-07-07 14:37:41,568 - agent.agent - ERROR - [agent.py:427] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:37:41,569 - agent.agent - ERROR - [agent.py:629] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:37:56,549 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:37:56,565 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:37:56,583 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:37:56,590 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:38:27,392 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:38:27,407 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:38:27,491 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:38:27,498 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:38:27,888 - agent.agent - INFO - [agent.py:577] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 14:38:27,888 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 14:38:27,933 - agent.agent - INFO - [agent.py:435] - [Function Agent] Unified function agent created successfully
2025-07-07 14:38:27,934 - agent.agent - INFO - [agent.py:439] - [Response Agent] Creating response agent for seller_id: test_seller
2025-07-07 14:38:27,934 - agent.agent - INFO - [agent.py:570] - [Response Agent] Response agent created successfully
2025-07-07 14:38:27,935 - agent.agent - INFO - [agent.py:587] - [Multi-Agent System] All agents created successfully
2025-07-07 14:38:27,935 - agent.agent - INFO - [agent.py:599] - [Multi-Agent System] Starting processing for seller_id: test_seller, user_id: test_user
2025-07-07 14:38:27,935 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Processing user input: check if user exists
2025-07-07 14:38:27,936 - agent.agent - INFO - [agent.py:611] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:38:27,936 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: test_seller
2025-07-07 14:38:27,936 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:38:36,844 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:38:43,590 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "user_management",
  "confidence": 0.9,
  "reasoning": "The user is explicitly asking to check the existence of a seller with ID 'test_seller', which falls under the category of managing or querying user information. This aligns closely with the 'user_management' intent."
}
```
2025-07-07 14:38:43,590 - agent.agent - INFO - [agent.py:622] - [Multi-Agent System] Detected intent: user_management
2025-07-07 14:38:43,591 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:38:43,591 - agent.agent - INFO - [agent.py:376] - [Function Agent] Invoking unified function agent with input: {'input': 'check if user exists', 'intent': 'user_management'}
2025-07-07 14:38:53,167 - agent.agent - INFO - [agent.py:400] - [Function Agent] Agent execution completed
2025-07-07 14:38:53,167 - agent.agent - ERROR - [agent.py:418] - [Function Agent] Error logging query: invalid literal for int() with base 10: 'test_seller'
2025-07-07 14:38:53,167 - agent.agent - INFO - [agent.py:634] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 14:38:53,168 - agent.agent - INFO - [agent.py:637] - [Multi-Agent System] Step 3: Generating response
2025-07-07 14:38:53,168 - agent.agent - INFO - [agent.py:504] - [Response Agent] Processing response for seller_id: test_seller
2025-07-07 14:38:53,168 - agent.agent - INFO - [agent.py:509] - [Response Agent] Step 1: Determining response strategy
2025-07-07 14:38:58,478 - agent.agent - INFO - [agent.py:523] - [Response Agent] Step 2: Generating response
2025-07-07 14:39:05,950 - agent.agent - INFO - [agent.py:543] - [Response Agent] Response generation completed
2025-07-07 14:39:05,951 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Processing completed successfully
2025-07-07 14:39:38,097 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 14:39:38,110 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 14:39:38,127 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 14:39:38,133 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 14:39:41,732 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:39:41,733 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:39:41,733 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:39:41,733 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:39:41,734 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:39:41,734 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:39:41,734 - agent.agent - INFO - [agent.py:577] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:39:41,734 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:39:41,779 - agent.agent - INFO - [agent.py:435] - [Function Agent] Unified function agent created successfully
2025-07-07 14:39:41,779 - agent.agent - INFO - [agent.py:439] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 14:39:41,779 - agent.agent - INFO - [agent.py:570] - [Response Agent] Response agent created successfully
2025-07-07 14:39:41,780 - agent.agent - INFO - [agent.py:587] - [Multi-Agent System] All agents created successfully
2025-07-07 14:39:41,780 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 14:39:41,780 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 14:39:41,780 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 14:39:41,780 - agent.agent - INFO - [agent.py:599] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 14:39:41,780 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Processing user input: hi
2025-07-07 14:39:41,781 - agent.agent - INFO - [agent.py:611] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:39:41,781 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 14:39:41,781 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:39:47,330 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:39:54,058 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "general_inquiry",
  "confidence": 0.9,
  "reasoning": "The user's greeting 'hi' does not provide any specific information about products, orders, or user management, making it most likely a general inquiry or the start of a conversation."
}
```
2025-07-07 14:39:54,058 - agent.agent - INFO - [agent.py:622] - [Multi-Agent System] Detected intent: general_inquiry
2025-07-07 14:39:54,059 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:39:54,059 - agent.agent - INFO - [agent.py:376] - [Function Agent] Invoking unified function agent with input: {'input': 'hi', 'intent': 'general_inquiry'}
2025-07-07 14:40:01,144 - agent.agent - INFO - [agent.py:400] - [Function Agent] Agent execution completed
2025-07-07 14:40:01,199 - agent.agent - INFO - [agent.py:634] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 14:40:01,199 - agent.agent - INFO - [agent.py:637] - [Multi-Agent System] Step 3: Generating response
2025-07-07 14:40:01,199 - agent.agent - INFO - [agent.py:504] - [Response Agent] Processing response for seller_id: 1
2025-07-07 14:40:01,199 - agent.agent - INFO - [agent.py:509] - [Response Agent] Step 1: Determining response strategy
2025-07-07 14:40:06,658 - agent.agent - INFO - [agent.py:523] - [Response Agent] Step 2: Generating response
2025-07-07 14:40:14,323 - agent.agent - INFO - [agent.py:543] - [Response Agent] Response generation completed
2025-07-07 14:40:14,324 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Processing completed successfully
2025-07-07 14:40:14,324 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 14:40:38,726 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 14:40:38,726 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 14:40:38,726 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 14:40:38,727 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 14:40:38,727 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 14:40:38,727 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 14:40:38,727 - agent.agent - INFO - [agent.py:577] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 14:40:38,727 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 14:40:38,769 - agent.agent - INFO - [agent.py:435] - [Function Agent] Unified function agent created successfully
2025-07-07 14:40:38,770 - agent.agent - INFO - [agent.py:439] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 14:40:38,770 - agent.agent - INFO - [agent.py:570] - [Response Agent] Response agent created successfully
2025-07-07 14:40:38,771 - agent.agent - INFO - [agent.py:587] - [Multi-Agent System] All agents created successfully
2025-07-07 14:40:38,771 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 14:40:38,771 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 14:40:38,772 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 14:40:38,772 - agent.agent - INFO - [agent.py:599] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 14:40:38,772 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Processing user input: i want buy wireless mouse
2025-07-07 14:40:38,773 - agent.agent - INFO - [agent.py:611] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 14:40:38,773 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 14:40:38,773 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 14:40:47,016 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 14:40:54,150 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.9,
  "reasoning": "The user explicitly mentions wanting to purchase a wireless mouse, which directly aligns with the 'place_order' intent. The presence of a product ('wireless mouse') and the action ('buy') strongly indicate this intent."
}
```
2025-07-07 14:40:54,151 - agent.agent - INFO - [agent.py:622] - [Multi-Agent System] Detected intent: place_order
2025-07-07 14:40:54,151 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 14:40:54,151 - agent.agent - INFO - [agent.py:376] - [Function Agent] Invoking unified function agent with input: {'input': 'i want buy wireless mouse', 'intent': 'place_order'}
2025-07-07 14:41:00,628 - agent.agent - ERROR - [agent.py:427] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:41:00,629 - agent.agent - ERROR - [agent.py:629] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 14:41:00,629 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 15:57:58,153 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 15:57:58,169 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 15:57:58,191 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 15:57:58,199 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 15:58:08,118 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 15:58:08,135 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 15:58:08,220 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 15:58:08,228 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 15:58:08,633 - agent.agent - INFO - [agent.py:609] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 15:58:08,634 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 15:58:08,638 - agent.agent - ERROR - [agent.py:389] - [Function Agent] Error creating agent: '_SpecialForm' object has no attribute 'replace'
2025-07-07 15:58:08,639 - agent.agent - ERROR - [agent.py:621] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 15:58:22,164 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 15:58:22,180 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 15:58:22,199 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 15:58:22,206 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 15:58:39,312 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 15:58:39,331 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 15:58:39,356 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 15:58:39,365 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 15:58:48,562 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 15:58:48,577 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 15:58:48,657 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 15:58:48,663 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 15:58:49,043 - agent.agent - INFO - [agent.py:626] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 15:58:49,043 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 15:58:49,048 - agent.agent - ERROR - [agent.py:406] - [Function Agent] Error creating agent: '_SpecialForm' object has no attribute 'replace'
2025-07-07 15:58:49,048 - agent.agent - ERROR - [agent.py:638] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 15:59:01,859 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 15:59:01,874 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 15:59:01,893 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 15:59:01,900 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 15:59:26,893 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 15:59:26,908 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 15:59:26,926 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 15:59:26,933 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 15:59:49,801 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 15:59:49,821 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 15:59:49,913 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 15:59:49,920 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 15:59:50,398 - agent.agent - INFO - [agent.py:577] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 15:59:50,398 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 15:59:50,452 - agent.agent - INFO - [agent.py:435] - [Function Agent] Unified function agent created successfully
2025-07-07 15:59:50,452 - agent.agent - INFO - [agent.py:439] - [Response Agent] Creating response agent for seller_id: test_seller
2025-07-07 15:59:50,453 - agent.agent - INFO - [agent.py:570] - [Response Agent] Response agent created successfully
2025-07-07 15:59:50,453 - agent.agent - INFO - [agent.py:587] - [Multi-Agent System] All agents created successfully
2025-07-07 15:59:50,454 - agent.agent - INFO - [agent.py:599] - [Multi-Agent System] Starting processing for seller_id: test_seller, user_id: test_user
2025-07-07 15:59:50,454 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Processing user input: check if user exists
2025-07-07 15:59:50,454 - agent.agent - INFO - [agent.py:611] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 15:59:50,454 - agent.agent - INFO - [agent.py:187] - [Intent Agent] Processing input for seller_id: test_seller
2025-07-07 15:59:50,455 - agent.agent - INFO - [agent.py:192] - [Intent Agent] Step 1: Extracting entities
2025-07-07 15:59:56,658 - agent.agent - INFO - [agent.py:201] - [Intent Agent] Step 2: Classifying intent
2025-07-07 16:00:11,256 - agent.agent - INFO - [agent.py:212] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "user_management",
  "confidence": 0.9,
  "reasoning": "The user is asking to verify the existence of a seller with the ID 'test_seller', which directly relates to managing or querying user information. This falls under the 'user_management' intent as it involves checking user details or existence."
}
```
2025-07-07 16:00:11,256 - agent.agent - INFO - [agent.py:622] - [Multi-Agent System] Detected intent: user_management
2025-07-07 16:00:11,256 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 16:00:11,257 - agent.agent - INFO - [agent.py:376] - [Function Agent] Invoking unified function agent with input: {'input': 'check if user exists', 'intent': 'user_management'}
2025-07-07 16:00:15,643 - agent.agent - ERROR - [agent.py:427] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 16:00:15,644 - agent.agent - ERROR - [agent.py:629] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 16:01:01,453 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:01:01,468 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:01:01,486 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:01:01,492 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:01:37,553 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:01:37,567 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:01:37,585 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:01:37,591 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:01:50,700 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:01:50,716 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:01:50,797 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:01:50,803 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:01:51,199 - agent.agent - INFO - [agent.py:641] - [Multi-Agent System] Creating multi-agent system for seller_id: test_seller, user_id: test_user
2025-07-07 16:01:51,199 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: test_seller
2025-07-07 16:01:51,203 - agent.agent - ERROR - [agent.py:421] - [Function Agent] Error creating agent: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:01:51,204 - agent.agent - ERROR - [agent.py:653] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:02:29,492 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:02:29,506 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:02:29,526 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:02:29,532 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:04:33,443 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:04:33,457 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:04:33,475 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:04:33,482 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:04:56,355 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:04:56,372 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:04:56,394 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:04:56,402 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:05:04,106 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 16:05:04,107 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 16:05:04,107 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 16:05:04,107 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 16:05:04,107 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 16:05:04,108 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 16:05:04,108 - agent.agent - INFO - [agent.py:590] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 16:05:04,108 - agent.agent - INFO - [agent.py:152] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 16:05:04,109 - agent.agent - INFO - [agent.py:222] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 16:05:04,110 - agent.agent - ERROR - [agent.py:602] - [Multi-Agent System] Error creating agents: name 'List' is not defined
2025-07-07 16:05:04,110 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: name 'List' is not defined
2025-07-07 16:05:04,110 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 597, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 231, in create_function_agent
    class PlaceOrderInput(BaseModel):
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 232, in PlaceOrderInput
    items: List[Dict[str, Any]] = Field(description="List of items, each with product_id (string) and quantity (integer)")
NameError: name 'List' is not defined
2025-07-07 16:05:45,945 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:05:45,962 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:05:45,983 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:05:45,990 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:05:46,384 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 16:05:46,385 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 16:05:46,385 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 16:05:46,385 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 16:05:46,385 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 16:05:46,386 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 16:05:46,386 - agent.agent - INFO - [agent.py:591] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 16:05:46,386 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 16:05:46,387 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 16:05:46,389 - agent.agent - ERROR - [agent.py:603] - [Multi-Agent System] Error creating agents: unsupported operand type(s) for |: 'type' and 'NoneType'
2025-07-07 16:05:46,390 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: unsupported operand type(s) for |: 'type' and 'NoneType'
2025-07-07 16:05:46,390 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 598, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 241, in create_function_agent
    class UpdateUserInfoInput(BaseModel):
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 242, in UpdateUserInfoInput
    name: str | None = Field(description="User's full name", default=None)
TypeError: unsupported operand type(s) for |: 'type' and 'NoneType'
2025-07-07 16:06:19,996 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:06:20,011 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:06:20,031 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:06:20,040 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:06:49,138 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:06:49,155 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:06:49,181 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:06:49,190 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:06:57,485 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:06:57,498 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:06:57,518 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:06:57,524 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:07:19,327 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:07:19,341 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:07:19,361 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:07:19,370 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:07:41,655 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:07:41,668 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:07:41,685 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:07:41,693 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:07:46,013 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 16:07:46,013 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 16:07:46,014 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 16:07:46,014 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 16:07:46,014 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 16:07:46,015 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 16:07:46,015 - agent.agent - INFO - [agent.py:591] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 16:07:46,015 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 16:07:46,016 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 16:07:46,021 - agent.agent - ERROR - [agent.py:332] - [Function Agent] Error binding tools to LLM: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:07:46,022 - agent.agent - ERROR - [agent.py:603] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:07:46,022 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:07:46,022 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 598, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 329, in create_function_agent
    llm_with_tools = llm.bind_tools(function_tools)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1578, in bind_tools
    formatted_tools = [
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1579, in <listcomp>
    convert_to_openai_tool(tool, strict=strict) for tool in tools
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:17:55,863 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 16:17:55,876 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 16:17:55,895 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 16:17:55,902 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 16:17:56,254 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 16:17:56,254 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 16:17:56,255 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 16:17:56,255 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 16:17:56,255 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 16:17:56,256 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 16:17:56,256 - agent.agent - INFO - [agent.py:600] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 16:17:56,256 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 16:17:56,256 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 16:17:56,259 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool get_product_info: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:17:56,260 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool track_order: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:17:56,260 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool place_order: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:17:56,260 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool save_user: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:17:56,260 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool update_user_info: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:17:56,263 - agent.agent - ERROR - [agent.py:341] - [Function Agent] Error binding tools to LLM: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:17:56,263 - agent.agent - ERROR - [agent.py:612] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:17:56,263 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 16:17:56,263 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 607, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 338, in create_function_agent
    llm_with_tools = llm.bind_tools(function_tools)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1578, in bind_tools
    formatted_tools = [
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1579, in <listcomp>
    convert_to_openai_tool(tool, strict=strict) for tool in tools
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:17:46,947 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:17:47,011 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:17:47,268 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:17:47,277 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:18:09,271 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 19:18:09,271 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 19:18:09,272 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 19:18:09,272 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 19:18:09,272 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 19:18:09,272 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 19:18:09,272 - agent.agent - INFO - [agent.py:600] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 19:18:09,273 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 19:18:09,273 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 19:18:09,276 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool get_product_info: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:18:09,277 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool track_order: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:18:09,277 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool place_order: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:18:09,278 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool save_user: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:18:09,278 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool update_user_info: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:18:09,281 - agent.agent - ERROR - [agent.py:341] - [Function Agent] Error binding tools to LLM: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:18:09,281 - agent.agent - ERROR - [agent.py:612] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:18:09,281 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:18:09,282 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 607, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 338, in create_function_agent
    llm_with_tools = llm.bind_tools(function_tools)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1578, in bind_tools
    formatted_tools = [
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1579, in <listcomp>
    convert_to_openai_tool(tool, strict=strict) for tool in tools
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:26:07,084 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:26:07,098 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:26:07,118 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:26:07,126 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:27:02,512 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:27:02,526 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:27:02,583 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:27:02,590 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:27:14,294 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:27:14,308 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:27:14,327 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:27:14,335 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:27:25,218 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:27:25,233 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:27:25,256 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:27:25,265 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:27:35,103 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:27:35,119 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:27:35,138 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:27:35,145 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:28:38,427 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:28:38,445 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:28:38,464 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:28:38,471 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:28:42,943 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:28:42,958 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:28:42,977 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:28:42,984 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:30:16,129 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:30:16,148 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:30:16,168 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:30:16,176 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:36:35,635 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 19:36:35,636 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 19:36:35,636 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 19:36:35,636 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 19:36:35,636 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 19:36:35,636 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 19:36:35,636 - agent.agent - INFO - [agent.py:603] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 19:36:35,637 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 19:36:35,637 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 19:36:35,641 - agent.agent - ERROR - [agent.py:615] - [Multi-Agent System] Error creating agents: unsupported operand type(s) for |: 'type' and 'NoneType'
2025-07-07 19:36:35,641 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: unsupported operand type(s) for |: 'type' and 'NoneType'
2025-07-07 19:36:35,642 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 610, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 241, in create_function_agent
    class UpdateUserInfoInput(BaseModel):
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 242, in UpdateUserInfoInput
    name: str | None = Field(description="User's full name", default="")
TypeError: unsupported operand type(s) for |: 'type' and 'NoneType'
2025-07-07 19:38:25,588 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:38:25,603 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:38:25,623 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:38:25,631 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:39:20,960 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:39:20,976 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:39:20,995 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:39:21,002 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:39:29,853 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:39:29,869 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:39:29,888 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:39:29,896 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:39:49,622 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:39:49,642 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:39:49,669 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:39:49,680 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:40:00,221 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:40:00,235 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:40:00,254 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:40:00,262 - faiss - INFO - [__init__.py:205] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:40:20,307 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:43:12,683 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 19:43:12,684 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 19:43:12,684 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 19:43:12,684 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 19:43:12,684 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 19:43:12,684 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 19:43:12,685 - agent.agent - INFO - [agent.py:603] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 19:43:12,685 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 19:43:12,685 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 19:43:12,688 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool get_product_info: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:43:12,688 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool track_order: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:43:12,689 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool place_order: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:43:12,690 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool save_user: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:43:12,690 - agent.agent - ERROR - [agent.py:334] - [Function Agent] Error serializing schema for tool update_user_info: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:43:12,692 - agent.agent - ERROR - [agent.py:341] - [Function Agent] Error binding tools to LLM: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:43:12,693 - agent.agent - ERROR - [agent.py:615] - [Multi-Agent System] Error creating agents: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:43:12,693 - services.chat - ERROR - [chat.py:94] - [Chat API] Unexpected error: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:43:12,693 - services.chat - ERROR - [chat.py:95] - [Chat API] Exception details:
Traceback (most recent call last):
  File "D:\Project\business-chat-assistent\chatbot\services\chat.py", line 67, in chat
    agent_system = create_multi_agent_system(request.seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 610, in create_multi_agent_system
    function_agent = create_function_agent(seller_id, user_id)
  File "D:\Project\business-chat-assistent\chatbot\agent\agent.py", line 338, in create_function_agent
    llm_with_tools = llm.bind_tools(function_tools)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1578, in bind_tools
    formatted_tools = [
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_openai\chat_models\base.py", line 1579, in <listcomp>
    convert_to_openai_tool(tool, strict=strict) for tool in tools
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 586, in convert_to_openai_tool
    oai_function = convert_to_openai_function(tool, strict=strict)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 476, in convert_to_openai_function
    oai_function = cast("dict", _format_tool_to_openai_function(function))
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 340, in _format_tool_to_openai_function
    return _convert_pydantic_to_openai_function(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\langchain_core\utils\function_calling.py", line 153, in _convert_pydantic_to_openai_function
    schema = model.model_json_schema()  # Pydantic 2
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\main.py", line 555, in model_json_schema
    return model_json_schema(
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 2404, in model_json_schema
    schema_generator_instance = schema_generator(by_alias=by_alias, ref_template=ref_template)
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 278, in __init__
    self._schema_type_to_method = self.build_schema_type_to_method()
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\site-packages\pydantic\json_schema.py", line 317, in build_schema_type_to_method
    method_name = f'{key.replace("-", "_")}_schema'
  File "C:\Users\Nipul\AppData\Local\Programs\Python\Python39\lib\typing.py", line 647, in __getattr__
    return getattr(self.__origin__, attr)
AttributeError: '_SpecialForm' object has no attribute 'replace'
2025-07-07 19:54:52,685 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:55:51,786 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:55:51,851 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:55:52,518 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:55:52,558 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:56:17,964 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 19:56:17,964 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 19:56:17,965 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 19:56:17,965 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 19:56:17,965 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 19:56:17,966 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 19:56:17,966 - agent.agent - INFO - [agent.py:603] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 19:56:17,966 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 19:56:17,967 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 19:56:18,039 - agent.agent - INFO - [agent.py:461] - [Function Agent] Unified function agent created successfully
2025-07-07 19:56:18,040 - agent.agent - INFO - [agent.py:465] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 19:56:18,040 - agent.agent - INFO - [agent.py:596] - [Response Agent] Response agent created successfully
2025-07-07 19:56:18,040 - agent.agent - INFO - [agent.py:613] - [Multi-Agent System] All agents created successfully
2025-07-07 19:56:18,041 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 19:56:18,041 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 19:56:18,041 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 19:56:18,041 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 19:56:18,041 - agent.agent - INFO - [agent.py:631] - [Multi-Agent System] Processing user input: hi
2025-07-07 19:56:18,042 - agent.agent - INFO - [agent.py:637] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 19:56:18,042 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 19:56:18,042 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 19:56:24,016 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 19:56:30,658 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "general_inquiry",
  "confidence": 0.9,
  "reasoning": "The user's greeting 'hi' does not provide specific information about products, orders, or user management, making it most likely a general inquiry or the start of a conversation."
}
```
2025-07-07 19:56:30,659 - agent.agent - INFO - [agent.py:648] - [Multi-Agent System] Detected intent: general_inquiry
2025-07-07 19:56:30,659 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 19:56:30,659 - agent.agent - INFO - [agent.py:402] - [Function Agent] Invoking unified function agent with input: {'input': 'hi', 'intent': 'general_inquiry'}
2025-07-07 19:56:30,668 - langchain_core.callbacks.manager - WARNING - [manager.py:297] - Error in function.on_chain_start callback: AttributeError("'function' object has no attribute 'ignore_chain'")
2025-07-07 19:56:30,668 - agent.agent - ERROR - [agent.py:453] - [Function Agent] Error in agent execution: 'function' object has no attribute 'raise_error'
2025-07-07 19:56:30,668 - agent.agent - ERROR - [agent.py:655] - [Multi-Agent System] Function execution failed: 'function' object has no attribute 'raise_error'
2025-07-07 19:56:30,668 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 19:57:38,898 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:57:38,914 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:57:39,010 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:57:39,016 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:57:52,473 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:57:52,486 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:57:52,569 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:57:52,573 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:58:03,956 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 19:58:03,956 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 19:58:03,958 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 19:58:03,958 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 19:58:03,958 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 19:58:03,958 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 19:58:03,958 - agent.agent - INFO - [agent.py:603] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 19:58:03,958 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 19:58:03,958 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 19:58:04,006 - agent.agent - INFO - [agent.py:461] - [Function Agent] Unified function agent created successfully
2025-07-07 19:58:04,006 - agent.agent - INFO - [agent.py:465] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 19:58:04,006 - agent.agent - INFO - [agent.py:596] - [Response Agent] Response agent created successfully
2025-07-07 19:58:04,006 - agent.agent - INFO - [agent.py:613] - [Multi-Agent System] All agents created successfully
2025-07-07 19:58:04,006 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 19:58:04,008 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 19:58:04,008 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 19:58:04,008 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 19:58:04,008 - agent.agent - INFO - [agent.py:631] - [Multi-Agent System] Processing user input: hi
2025-07-07 19:58:04,008 - agent.agent - INFO - [agent.py:637] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 19:58:04,008 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 19:58:04,009 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 19:58:09,728 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 19:58:18,206 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "general_inquiry",
  "confidence": 0.9,
  "reasoning": "The user's greeting 'hi' suggests a general inquiry or the start of a conversation without specific details about products, orders, or user management. The absence of any extracted entities further supports this classification."
}
```
2025-07-07 19:58:18,206 - agent.agent - INFO - [agent.py:648] - [Multi-Agent System] Detected intent: general_inquiry
2025-07-07 19:58:18,206 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 19:58:18,206 - agent.agent - INFO - [agent.py:402] - [Function Agent] Invoking unified function agent with input: {'input': 'hi', 'intent': 'general_inquiry'}
2025-07-07 19:58:18,212 - agent.agent - ERROR - [agent.py:453] - [Function Agent] Error in agent execution: "Input to ChatPromptTemplate is missing variables {'product_id'}.  Expected: ['agent_scratchpad', 'chat_history', 'examples', 'input', 'intent', 'product_id'] Received: ['input', 'intent', 'examples', 'chat_history', 'intermediate_steps', 'agent_scratchpad']\nNote: if you intended {product_id} to be part of the string and not a variable, please escape it with double curly braces like: '{{product_id}}'.\nFor troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_PROMPT_INPUT "
2025-07-07 19:58:18,212 - agent.agent - ERROR - [agent.py:655] - [Multi-Agent System] Function execution failed: "Input to ChatPromptTemplate is missing variables {'product_id'}.  Expected: ['agent_scratchpad', 'chat_history', 'examples', 'input', 'intent', 'product_id'] Received: ['input', 'intent', 'examples', 'chat_history', 'intermediate_steps', 'agent_scratchpad']\nNote: if you intended {product_id} to be part of the string and not a variable, please escape it with double curly braces like: '{{product_id}}'.\nFor troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_PROMPT_INPUT "
2025-07-07 19:58:18,213 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 19:59:33,778 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 19:59:33,801 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 19:59:33,940 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 19:59:33,945 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 19:59:38,184 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 19:59:38,184 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 19:59:38,184 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 19:59:38,184 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 19:59:38,185 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 19:59:38,185 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 19:59:38,185 - agent.agent - INFO - [agent.py:603] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 19:59:38,185 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 19:59:38,186 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 19:59:38,236 - agent.agent - INFO - [agent.py:461] - [Function Agent] Unified function agent created successfully
2025-07-07 19:59:38,237 - agent.agent - INFO - [agent.py:465] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 19:59:38,237 - agent.agent - INFO - [agent.py:596] - [Response Agent] Response agent created successfully
2025-07-07 19:59:38,237 - agent.agent - INFO - [agent.py:613] - [Multi-Agent System] All agents created successfully
2025-07-07 19:59:38,237 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 19:59:38,237 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 19:59:38,237 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 19:59:38,238 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 19:59:38,238 - agent.agent - INFO - [agent.py:631] - [Multi-Agent System] Processing user input: hi
2025-07-07 19:59:38,238 - agent.agent - INFO - [agent.py:637] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 19:59:38,238 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 19:59:38,238 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 19:59:47,905 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 19:59:54,272 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "general_inquiry",
  "confidence": 0.9,
  "reasoning": "The user's input is a simple greeting ('hi') without any mention of products, orders, or user-related actions. This suggests the intent is likely a general inquiry or the start of a conversation."
}
```
2025-07-07 19:59:54,272 - agent.agent - INFO - [agent.py:648] - [Multi-Agent System] Detected intent: general_inquiry
2025-07-07 19:59:54,273 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 19:59:54,273 - agent.agent - INFO - [agent.py:402] - [Function Agent] Invoking unified function agent with input: {'input': 'hi', 'intent': 'general_inquiry'}
2025-07-07 19:59:54,280 - agent.agent - ERROR - [agent.py:453] - [Function Agent] Error in agent execution: "Input to ChatPromptTemplate is missing variables {'[tool.name for tool in function_tools]'}.  Expected: ['[tool.name for tool in function_tools]', 'agent_scratchpad', 'chat_history', 'input'] Received: ['input', 'intent', 'examples', 'chat_history', 'intermediate_steps', 'agent_scratchpad']\nNote: if you intended {[tool.name for tool in function_tools]} to be part of the string and not a variable, please escape it with double curly braces like: '{{[tool.name for tool in function_tools]}}'.\nFor troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_PROMPT_INPUT "
2025-07-07 19:59:54,280 - agent.agent - ERROR - [agent.py:655] - [Multi-Agent System] Function execution failed: "Input to ChatPromptTemplate is missing variables {'[tool.name for tool in function_tools]'}.  Expected: ['[tool.name for tool in function_tools]', 'agent_scratchpad', 'chat_history', 'input'] Received: ['input', 'intent', 'examples', 'chat_history', 'intermediate_steps', 'agent_scratchpad']\nNote: if you intended {[tool.name for tool in function_tools]} to be part of the string and not a variable, please escape it with double curly braces like: '{{[tool.name for tool in function_tools]}}'.\nFor troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_PROMPT_INPUT "
2025-07-07 19:59:54,281 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:02:01,393 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:02:01,409 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:02:01,494 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:02:01,499 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:02:32,997 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:02:33,023 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:02:33,121 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:02:33,126 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:03:32,057 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:03:32,071 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:03:32,151 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:03:32,156 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:03:32,800 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:03:32,800 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:03:32,801 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:03:32,801 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:03:32,801 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:03:32,801 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:03:32,802 - agent.agent - INFO - [agent.py:603] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:03:32,802 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:03:32,802 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:03:32,847 - agent.agent - INFO - [agent.py:461] - [Function Agent] Unified function agent created successfully
2025-07-07 20:03:32,848 - agent.agent - INFO - [agent.py:465] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:03:32,848 - agent.agent - INFO - [agent.py:596] - [Response Agent] Response agent created successfully
2025-07-07 20:03:32,848 - agent.agent - INFO - [agent.py:613] - [Multi-Agent System] All agents created successfully
2025-07-07 20:03:32,849 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:03:32,849 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:03:32,849 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:03:32,849 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:03:32,849 - agent.agent - INFO - [agent.py:631] - [Multi-Agent System] Processing user input: hi
2025-07-07 20:03:32,849 - agent.agent - INFO - [agent.py:637] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:03:32,849 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:03:32,849 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:03:37,538 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:03:43,003 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "general_inquiry",
  "confidence": 0.9,
  "reasoning": "The user's greeting 'hi' does not indicate a specific intent related to products, orders, or user management. It is most likely a general inquiry or the start of a conversation, hence classified under 'general_inquiry' with high confidence."
}
```
2025-07-07 20:03:43,004 - agent.agent - INFO - [agent.py:648] - [Multi-Agent System] Detected intent: general_inquiry
2025-07-07 20:03:43,004 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:03:43,004 - agent.agent - INFO - [agent.py:402] - [Function Agent] Invoking unified function agent with input: {'input': 'hi', 'intent': 'general_inquiry'}
2025-07-07 20:03:47,205 - agent.agent - INFO - [agent.py:426] - [Function Agent] Agent execution completed
2025-07-07 20:03:47,509 - agent.agent - INFO - [agent.py:660] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:03:47,510 - agent.agent - INFO - [agent.py:663] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:03:47,510 - agent.agent - INFO - [agent.py:530] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:03:47,510 - agent.agent - INFO - [agent.py:535] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:03:52,477 - agent.agent - INFO - [agent.py:549] - [Response Agent] Step 2: Generating response
2025-07-07 20:03:57,601 - agent.agent - INFO - [agent.py:569] - [Response Agent] Response generation completed
2025-07-07 20:03:57,602 - agent.agent - INFO - [agent.py:677] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:03:57,602 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:04:17,073 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:04:17,074 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:04:17,074 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:04:17,074 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:04:17,074 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:04:17,074 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:04:17,074 - agent.agent - INFO - [agent.py:603] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:04:17,075 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:04:17,075 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:04:17,128 - agent.agent - INFO - [agent.py:461] - [Function Agent] Unified function agent created successfully
2025-07-07 20:04:17,128 - agent.agent - INFO - [agent.py:465] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:04:17,129 - agent.agent - INFO - [agent.py:596] - [Response Agent] Response agent created successfully
2025-07-07 20:04:17,129 - agent.agent - INFO - [agent.py:613] - [Multi-Agent System] All agents created successfully
2025-07-07 20:04:17,129 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:04:17,129 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:04:17,129 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:04:17,129 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:04:17,130 - agent.agent - INFO - [agent.py:631] - [Multi-Agent System] Processing user input: I need to buy wireless mouse
2025-07-07 20:04:17,130 - agent.agent - INFO - [agent.py:637] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:04:17,130 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:04:17,130 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:04:21,758 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:04:27,965 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.9,
  "reasoning": "The user explicitly mentions their need to 'buy' a specific product, which is a 'wireless mouse'. This directly aligns with the 'place_order' intent, as the user is indicating a desire to purchase a product. The high confidence is due to the clear and direct expression of the user's goal to make a purchase."
}
```
2025-07-07 20:04:27,966 - agent.agent - INFO - [agent.py:648] - [Multi-Agent System] Detected intent: place_order
2025-07-07 20:04:27,966 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:04:27,966 - agent.agent - INFO - [agent.py:402] - [Function Agent] Invoking unified function agent with input: {'input': 'I need to buy wireless mouse', 'intent': 'place_order'}
2025-07-07 20:04:40,256 - agent.agent - INFO - [agent.py:426] - [Function Agent] Agent execution completed
2025-07-07 20:04:40,258 - agent.agent - INFO - [agent.py:660] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:04:40,258 - agent.agent - INFO - [agent.py:663] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:04:40,258 - agent.agent - INFO - [agent.py:530] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:04:40,258 - agent.agent - INFO - [agent.py:535] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:04:44,801 - agent.agent - INFO - [agent.py:549] - [Response Agent] Step 2: Generating response
2025-07-07 20:04:54,795 - agent.agent - INFO - [agent.py:569] - [Response Agent] Response generation completed
2025-07-07 20:04:54,795 - agent.agent - INFO - [agent.py:677] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:04:54,796 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:05:11,816 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:05:11,816 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:05:11,816 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:05:11,816 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:05:11,817 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:05:11,817 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:05:11,817 - agent.agent - INFO - [agent.py:603] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:05:11,817 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:05:11,818 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:05:11,861 - agent.agent - INFO - [agent.py:461] - [Function Agent] Unified function agent created successfully
2025-07-07 20:05:11,862 - agent.agent - INFO - [agent.py:465] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:05:11,862 - agent.agent - INFO - [agent.py:596] - [Response Agent] Response agent created successfully
2025-07-07 20:05:11,862 - agent.agent - INFO - [agent.py:613] - [Multi-Agent System] All agents created successfully
2025-07-07 20:05:11,862 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:05:11,863 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:05:11,863 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:05:11,863 - agent.agent - INFO - [agent.py:625] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:05:11,863 - agent.agent - INFO - [agent.py:631] - [Multi-Agent System] Processing user input: I need to buy 1 of these
2025-07-07 20:05:11,863 - agent.agent - INFO - [agent.py:637] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:05:11,863 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:05:11,864 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:05:17,508 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:05:26,026 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.7,
  "reasoning": "The user expresses a clear intention to purchase an item ('I need to buy 1 of these'), which aligns with the 'place_order' intent. However, the confidence is not higher because the user did not specify the product name, which is typically crucial for placing an order."
}
```
2025-07-07 20:05:26,026 - agent.agent - INFO - [agent.py:648] - [Multi-Agent System] Detected intent: place_order
2025-07-07 20:05:26,027 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:05:26,027 - agent.agent - INFO - [agent.py:402] - [Function Agent] Invoking unified function agent with input: {'input': 'I need to buy 1 of these', 'intent': 'place_order'}
2025-07-07 20:05:30,326 - agent.agent - ERROR - [agent.py:453] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 20:05:30,326 - agent.agent - ERROR - [agent.py:655] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 20:05:30,327 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:06:26,355 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:06:26,370 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:06:26,462 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:06:26,466 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:06:27,187 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:06:27,187 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:06:27,188 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:06:27,188 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:06:27,188 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:06:27,188 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:06:27,188 - agent.agent - INFO - [agent.py:603] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:06:27,188 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:06:27,190 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:06:27,192 - agent.agent - ERROR - [agent.py:615] - [Multi-Agent System] Error creating agents: 1 validation error for StructuredTool
args_schema
  Field required [type=missing, input_value={'name': 'get_user_info',...o parameters required.'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing
2025-07-07 20:06:27,192 - services.chat - ERROR - [chat.py:88] - [Chat API] ValueError: 1 validation error for StructuredTool
args_schema
  Field required [type=missing, input_value={'name': 'get_user_info',...o parameters required.'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing
2025-07-07 20:07:09,759 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:07:09,772 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:07:09,850 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:07:09,855 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:07:11,782 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:07:11,783 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:07:11,783 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:07:11,783 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:07:11,784 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:07:11,784 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:07:11,784 - agent.agent - INFO - [agent.py:603] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:07:11,785 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:07:11,785 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:07:11,788 - agent.agent - ERROR - [agent.py:615] - [Multi-Agent System] Error creating agents: 1 validation error for StructuredTool
args_schema
  Field required [type=missing, input_value={'name': 'get_user_info',... for the current user.'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing
2025-07-07 20:07:11,788 - services.chat - ERROR - [chat.py:88] - [Chat API] ValueError: 1 validation error for StructuredTool
args_schema
  Field required [type=missing, input_value={'name': 'get_user_info',... for the current user.'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.11/v/missing
2025-07-07 20:07:59,826 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:07:59,840 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:07:59,923 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:07:59,928 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:08:42,551 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:08:42,564 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:08:42,644 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:08:42,649 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:10:11,848 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:10:11,863 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:10:11,945 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:10:11,948 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:10:25,922 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:10:25,935 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:10:26,017 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:10:26,023 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:10:26,660 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:10:26,660 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:10:26,660 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:10:26,661 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:10:26,661 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:10:26,661 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:10:26,661 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:10:26,662 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:10:26,662 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:10:26,707 - agent.agent - INFO - [agent.py:463] - [Function Agent] Unified function agent created successfully
2025-07-07 20:10:26,708 - agent.agent - INFO - [agent.py:467] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:10:26,708 - agent.agent - INFO - [agent.py:598] - [Response Agent] Response agent created successfully
2025-07-07 20:10:26,708 - agent.agent - INFO - [agent.py:615] - [Multi-Agent System] All agents created successfully
2025-07-07 20:10:26,708 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:10:26,708 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:10:26,708 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:10:26,708 - agent.agent - INFO - [agent.py:627] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:10:26,710 - agent.agent - INFO - [agent.py:633] - [Multi-Agent System] Processing user input: I need to buy 1 of these
2025-07-07 20:10:26,710 - agent.agent - INFO - [agent.py:639] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:10:26,710 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:10:26,710 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:10:31,831 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:10:37,921 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user is expressing a need to purchase an item, which directly relates to the 'place_order' intent. Although the specific product is not mentioned, the action of buying is clear. The confidence is not 1.0 because the lack of product details might require further clarification."
}
```
2025-07-07 20:10:37,921 - agent.agent - INFO - [agent.py:650] - [Multi-Agent System] Detected intent: place_order
2025-07-07 20:10:37,922 - agent.agent - INFO - [agent.py:653] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:10:37,922 - agent.agent - INFO - [agent.py:404] - [Function Agent] Invoking unified function agent with input: {'input': 'I need to buy 1 of these', 'intent': 'place_order'}
2025-07-07 20:10:37,927 - agent.agent - ERROR - [agent.py:455] - [Function Agent] Error in agent execution: "Input to ChatPromptTemplate is missing variables {'product_id'}.  Expected: ['agent_scratchpad', 'chat_history', 'examples', 'input', 'intent', 'product_id'] Received: ['input', 'intent', 'examples', 'chat_history', 'intermediate_steps', 'agent_scratchpad']\nNote: if you intended {product_id} to be part of the string and not a variable, please escape it with double curly braces like: '{{product_id}}'.\nFor troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_PROMPT_INPUT "
2025-07-07 20:10:37,927 - agent.agent - ERROR - [agent.py:657] - [Multi-Agent System] Function execution failed: "Input to ChatPromptTemplate is missing variables {'product_id'}.  Expected: ['agent_scratchpad', 'chat_history', 'examples', 'input', 'intent', 'product_id'] Received: ['input', 'intent', 'examples', 'chat_history', 'intermediate_steps', 'agent_scratchpad']\nNote: if you intended {product_id} to be part of the string and not a variable, please escape it with double curly braces like: '{{product_id}}'.\nFor troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_PROMPT_INPUT "
2025-07-07 20:10:37,928 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:12:03,245 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:12:03,258 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:12:03,339 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:12:03,344 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:12:03,997 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:12:03,998 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:12:03,998 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:12:03,998 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:12:03,998 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:12:03,998 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:12:03,998 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:12:03,998 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:12:03,998 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:12:04,044 - agent.agent - INFO - [agent.py:463] - [Function Agent] Unified function agent created successfully
2025-07-07 20:12:04,044 - agent.agent - INFO - [agent.py:467] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:12:04,045 - agent.agent - INFO - [agent.py:598] - [Response Agent] Response agent created successfully
2025-07-07 20:12:04,045 - agent.agent - INFO - [agent.py:615] - [Multi-Agent System] All agents created successfully
2025-07-07 20:12:04,046 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:12:04,046 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:12:04,046 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:12:04,047 - agent.agent - INFO - [agent.py:627] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:12:04,047 - agent.agent - INFO - [agent.py:633] - [Multi-Agent System] Processing user input: I need to buy 1 of these
2025-07-07 20:12:04,047 - agent.agent - INFO - [agent.py:639] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:12:04,047 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:12:04,047 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:12:09,469 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:12:16,014 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user is expressing a clear intention to purchase a product, specifically mentioning a quantity ('1 of these'). This aligns with the 'place_order' intent, which involves initiating a purchase. The confidence is not 1.0 because the product is unspecified, leaving some ambiguity."
}
```
2025-07-07 20:12:16,015 - agent.agent - INFO - [agent.py:650] - [Multi-Agent System] Detected intent: place_order
2025-07-07 20:12:16,015 - agent.agent - INFO - [agent.py:653] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:12:16,015 - agent.agent - INFO - [agent.py:404] - [Function Agent] Invoking unified function agent with input: {'input': 'I need to buy 1 of these', 'intent': 'place_order'}
2025-07-07 20:12:16,021 - agent.agent - ERROR - [agent.py:455] - [Function Agent] Error in agent execution: "Input to ChatPromptTemplate is missing variables {'[tool.name for tool in function_tools]'}.  Expected: ['[tool.name for tool in function_tools]', 'agent_scratchpad', 'chat_history', 'input'] Received: ['input', 'intent', 'examples', 'chat_history', 'intermediate_steps', 'agent_scratchpad']\nNote: if you intended {[tool.name for tool in function_tools]} to be part of the string and not a variable, please escape it with double curly braces like: '{{[tool.name for tool in function_tools]}}'.\nFor troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_PROMPT_INPUT "
2025-07-07 20:12:16,022 - agent.agent - ERROR - [agent.py:657] - [Multi-Agent System] Function execution failed: "Input to ChatPromptTemplate is missing variables {'[tool.name for tool in function_tools]'}.  Expected: ['[tool.name for tool in function_tools]', 'agent_scratchpad', 'chat_history', 'input'] Received: ['input', 'intent', 'examples', 'chat_history', 'intermediate_steps', 'agent_scratchpad']\nNote: if you intended {[tool.name for tool in function_tools]} to be part of the string and not a variable, please escape it with double curly braces like: '{{[tool.name for tool in function_tools]}}'.\nFor troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/INVALID_PROMPT_INPUT "
2025-07-07 20:12:16,022 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:12:19,450 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:12:19,465 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:12:19,547 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:12:19,552 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:12:20,807 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:12:20,807 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:12:20,808 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:12:20,808 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:12:20,808 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:12:20,809 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:12:20,809 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:12:20,809 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:12:20,810 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:12:20,862 - agent.agent - INFO - [agent.py:463] - [Function Agent] Unified function agent created successfully
2025-07-07 20:12:20,862 - agent.agent - INFO - [agent.py:467] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:12:20,863 - agent.agent - INFO - [agent.py:598] - [Response Agent] Response agent created successfully
2025-07-07 20:12:20,863 - agent.agent - INFO - [agent.py:615] - [Multi-Agent System] All agents created successfully
2025-07-07 20:12:20,863 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:12:20,864 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:12:20,864 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:12:20,864 - agent.agent - INFO - [agent.py:627] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:12:20,864 - agent.agent - INFO - [agent.py:633] - [Multi-Agent System] Processing user input: I need to buy 1 of these
2025-07-07 20:12:20,864 - agent.agent - INFO - [agent.py:639] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:12:20,865 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:12:20,865 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:12:26,747 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:12:35,867 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user is expressing a clear intention to purchase a product, indicated by the phrase 'I need to buy 1 of these'. Although the specific product is not mentioned, the action of buying is directly related to placing an order. The confidence is not 1.0 due to the lack of product specificity, which could affect the exact fulfillment of the intent."
}
```
2025-07-07 20:12:35,867 - agent.agent - INFO - [agent.py:650] - [Multi-Agent System] Detected intent: place_order
2025-07-07 20:12:35,867 - agent.agent - INFO - [agent.py:653] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:12:35,867 - agent.agent - INFO - [agent.py:404] - [Function Agent] Invoking unified function agent with input: {'input': 'I need to buy 1 of these', 'intent': 'place_order'}
2025-07-07 20:12:47,377 - agent.agent - INFO - [agent.py:428] - [Function Agent] Agent execution completed
2025-07-07 20:12:47,436 - agent.agent - INFO - [agent.py:662] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:12:47,436 - agent.agent - INFO - [agent.py:665] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:12:47,436 - agent.agent - INFO - [agent.py:532] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:12:47,436 - agent.agent - INFO - [agent.py:537] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:12:52,361 - agent.agent - INFO - [agent.py:551] - [Response Agent] Step 2: Generating response
2025-07-07 20:13:01,185 - agent.agent - INFO - [agent.py:571] - [Response Agent] Response generation completed
2025-07-07 20:13:01,185 - agent.agent - INFO - [agent.py:679] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:13:01,185 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:13:14,464 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:13:14,464 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:13:14,464 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:13:14,465 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:13:14,465 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:13:14,465 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:13:14,465 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:13:14,466 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:13:14,466 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:13:14,514 - agent.agent - INFO - [agent.py:463] - [Function Agent] Unified function agent created successfully
2025-07-07 20:13:14,514 - agent.agent - INFO - [agent.py:467] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:13:14,515 - agent.agent - INFO - [agent.py:598] - [Response Agent] Response agent created successfully
2025-07-07 20:13:14,515 - agent.agent - INFO - [agent.py:615] - [Multi-Agent System] All agents created successfully
2025-07-07 20:13:14,515 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:13:14,515 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:13:14,515 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:13:14,515 - agent.agent - INFO - [agent.py:627] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:13:14,515 - agent.agent - INFO - [agent.py:633] - [Multi-Agent System] Processing user input: Im I registered before?
2025-07-07 20:13:14,515 - agent.agent - INFO - [agent.py:639] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:13:14,516 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:13:14,516 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:13:20,012 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:13:26,344 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "user_management",
  "confidence": 0.9,
  "reasoning": "The user is inquiring about their registration status, which directly relates to user account management. There are no mentions of products, orders, or general inquiries, making 'user_management' the most appropriate intent."
}
```
2025-07-07 20:13:26,344 - agent.agent - INFO - [agent.py:650] - [Multi-Agent System] Detected intent: user_management
2025-07-07 20:13:26,344 - agent.agent - INFO - [agent.py:653] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:13:26,345 - agent.agent - INFO - [agent.py:404] - [Function Agent] Invoking unified function agent with input: {'input': 'Im I registered before?', 'intent': 'user_management'}
2025-07-07 20:13:30,828 - agent.agent - ERROR - [agent.py:455] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 20:13:30,828 - agent.agent - ERROR - [agent.py:657] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 20:13:30,829 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:14:06,177 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:14:06,190 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:14:06,273 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:14:06,278 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:14:06,898 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:14:06,900 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:14:06,900 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:14:06,900 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:14:06,900 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:14:06,900 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:14:06,901 - agent.agent - INFO - [agent.py:605] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:14:06,901 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:14:06,901 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:14:06,948 - agent.agent - INFO - [agent.py:463] - [Function Agent] Unified function agent created successfully
2025-07-07 20:14:06,948 - agent.agent - INFO - [agent.py:467] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:14:06,950 - agent.agent - INFO - [agent.py:598] - [Response Agent] Response agent created successfully
2025-07-07 20:14:06,950 - agent.agent - INFO - [agent.py:615] - [Multi-Agent System] All agents created successfully
2025-07-07 20:14:06,950 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:14:06,950 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:14:06,950 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:14:06,950 - agent.agent - INFO - [agent.py:627] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:14:06,951 - agent.agent - INFO - [agent.py:633] - [Multi-Agent System] Processing user input: Im I registered before?
2025-07-07 20:14:06,951 - agent.agent - INFO - [agent.py:639] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:14:06,951 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:14:06,951 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:14:13,023 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:14:19,213 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "user_management",
  "confidence": 0.9,
  "reasoning": "The user is inquiring about their registration status, which directly relates to managing their user account information. This falls under the 'user_management' intent as it involves checking or verifying user registration details."
}
```
2025-07-07 20:14:19,213 - agent.agent - INFO - [agent.py:650] - [Multi-Agent System] Detected intent: user_management
2025-07-07 20:14:19,213 - agent.agent - INFO - [agent.py:653] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:14:19,213 - agent.agent - INFO - [agent.py:404] - [Function Agent] Invoking unified function agent with input: {'input': 'Im I registered before?', 'intent': 'user_management'}
2025-07-07 20:14:23,935 - agent.agent - ERROR - [agent.py:455] - [Function Agent] Error in agent execution: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 20:14:23,935 - agent.agent - ERROR - [agent.py:657] - [Multi-Agent System] Function execution failed: Too many arguments to single-input tool check_user_exists.
                Consider using StructuredTool instead. Args: []
2025-07-07 20:14:23,935 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:16:23,619 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:16:23,631 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:16:23,714 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:16:23,718 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:16:27,264 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:16:27,264 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:16:27,264 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:16:27,264 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:16:27,264 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:16:27,265 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:16:27,265 - agent.agent - INFO - [agent.py:606] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:16:27,265 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:16:27,265 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:16:27,313 - agent.agent - INFO - [agent.py:464] - [Function Agent] Unified function agent created successfully
2025-07-07 20:16:27,313 - agent.agent - INFO - [agent.py:468] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:16:27,314 - agent.agent - INFO - [agent.py:599] - [Response Agent] Response agent created successfully
2025-07-07 20:16:27,314 - agent.agent - INFO - [agent.py:616] - [Multi-Agent System] All agents created successfully
2025-07-07 20:16:27,314 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:16:27,314 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:16:27,314 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:16:27,314 - agent.agent - INFO - [agent.py:628] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:16:27,314 - agent.agent - INFO - [agent.py:634] - [Multi-Agent System] Processing user input: am I available in db
2025-07-07 20:16:27,314 - agent.agent - INFO - [agent.py:640] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:16:27,314 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:16:27,314 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:16:32,070 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:16:38,473 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "user_management",
  "confidence": 0.9,
  "reasoning": "The user is inquiring about their presence or status in the database, which directly relates to user management. There are no mentions of products, orders, or general inquiries, making user_management the most appropriate intent."
}
```
2025-07-07 20:16:38,473 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Detected intent: user_management
2025-07-07 20:16:38,474 - agent.agent - INFO - [agent.py:654] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:16:38,474 - agent.agent - INFO - [agent.py:405] - [Function Agent] Invoking unified function agent with input: {'input': 'am I available in db', 'intent': 'user_management'}
2025-07-07 20:16:50,016 - agent.agent - INFO - [agent.py:429] - [Function Agent] Agent execution completed
2025-07-07 20:16:50,022 - agent.agent - INFO - [agent.py:663] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:16:50,023 - agent.agent - INFO - [agent.py:666] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:16:50,023 - agent.agent - INFO - [agent.py:533] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:16:50,023 - agent.agent - INFO - [agent.py:538] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:16:55,172 - agent.agent - INFO - [agent.py:552] - [Response Agent] Step 2: Generating response
2025-07-07 20:17:02,075 - agent.agent - INFO - [agent.py:572] - [Response Agent] Response generation completed
2025-07-07 20:17:02,075 - agent.agent - INFO - [agent.py:680] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:17:02,075 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:20:06,447 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:20:06,461 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:20:06,545 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:20:06,551 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:20:07,221 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:20:07,221 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:20:07,221 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:20:07,221 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:20:07,221 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:20:07,222 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:20:07,222 - agent.agent - INFO - [agent.py:608] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:20:07,222 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:20:07,222 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:20:07,253 - agent.agent - INFO - [agent.py:466] - [Function Agent] Unified function agent created successfully
2025-07-07 20:20:07,254 - agent.agent - INFO - [agent.py:470] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:20:07,288 - agent.agent - INFO - [agent.py:601] - [Response Agent] Response agent created successfully
2025-07-07 20:20:07,288 - agent.agent - INFO - [agent.py:618] - [Multi-Agent System] All agents created successfully
2025-07-07 20:20:07,290 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:20:07,290 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:20:07,290 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:20:07,291 - agent.agent - INFO - [agent.py:630] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:20:07,291 - agent.agent - INFO - [agent.py:636] - [Multi-Agent System] Processing user input: am I available in db
2025-07-07 20:20:07,291 - agent.agent - INFO - [agent.py:642] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:20:07,291 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:20:07,292 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:20:12,738 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:20:18,990 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "user_management",
  "confidence": 0.9,
  "reasoning": "The user is asking about their presence or status in the database, specifically mentioning their seller ID (1). This directly relates to user management, as it involves checking user records or status within the system. The lack of product-related entities and the focus on user information further supports this classification."
}
```
2025-07-07 20:20:18,991 - agent.agent - INFO - [agent.py:653] - [Multi-Agent System] Detected intent: user_management
2025-07-07 20:20:18,991 - agent.agent - INFO - [agent.py:656] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:20:18,991 - agent.agent - INFO - [agent.py:407] - [Function Agent] Invoking unified function agent with input: {'input': 'am I available in db', 'intent': 'user_management'}
2025-07-07 20:20:28,057 - agent.agent - INFO - [agent.py:431] - [Function Agent] Agent execution completed
2025-07-07 20:20:28,064 - agent.agent - INFO - [agent.py:665] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:20:28,064 - agent.agent - INFO - [agent.py:668] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:20:28,064 - agent.agent - INFO - [agent.py:535] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:20:28,065 - agent.agent - INFO - [agent.py:540] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:20:33,077 - agent.agent - INFO - [agent.py:554] - [Response Agent] Step 2: Generating response
2025-07-07 20:20:38,809 - agent.agent - INFO - [agent.py:574] - [Response Agent] Response generation completed
2025-07-07 20:20:38,809 - agent.agent - INFO - [agent.py:682] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:20:38,809 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:20:45,332 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:20:45,346 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:20:45,426 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:20:45,430 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:21:00,375 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:21:00,376 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:21:00,376 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:21:00,376 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:21:00,376 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:21:00,377 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:21:00,377 - agent.agent - INFO - [agent.py:607] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:21:00,377 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:21:00,378 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:21:00,411 - agent.agent - INFO - [agent.py:465] - [Function Agent] Unified function agent created successfully
2025-07-07 20:21:00,411 - agent.agent - INFO - [agent.py:469] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:21:00,412 - agent.agent - INFO - [agent.py:600] - [Response Agent] Response agent created successfully
2025-07-07 20:21:00,412 - agent.agent - INFO - [agent.py:617] - [Multi-Agent System] All agents created successfully
2025-07-07 20:21:00,412 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:21:00,412 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:21:00,413 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:21:00,413 - agent.agent - INFO - [agent.py:629] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:21:00,413 - agent.agent - INFO - [agent.py:635] - [Multi-Agent System] Processing user input: I need to buy 1 item of wireless mouse
2025-07-07 20:21:00,413 - agent.agent - INFO - [agent.py:641] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:21:00,414 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:21:00,414 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:21:05,785 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:21:12,847 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.9,
  "reasoning": "The user explicitly mentions wanting to purchase a specific product ('wireless mouse') with a specified quantity ('1 item'), which directly aligns with the 'place_order' intent. The context and entities clearly indicate a transactional intent rather than seeking information, tracking, or user management."
}
```
2025-07-07 20:21:12,848 - agent.agent - INFO - [agent.py:652] - [Multi-Agent System] Detected intent: place_order
2025-07-07 20:21:12,848 - agent.agent - INFO - [agent.py:655] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:21:12,848 - agent.agent - INFO - [agent.py:406] - [Function Agent] Invoking unified function agent with input: {'input': 'I need to buy 1 item of wireless mouse', 'intent': 'place_order'}
2025-07-07 20:21:41,581 - agent.agent - INFO - [agent.py:430] - [Function Agent] Agent execution completed
2025-07-07 20:21:41,584 - agent.agent - INFO - [agent.py:664] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:21:41,585 - agent.agent - INFO - [agent.py:667] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:21:41,585 - agent.agent - INFO - [agent.py:534] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:21:41,586 - agent.agent - INFO - [agent.py:539] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:21:46,503 - agent.agent - INFO - [agent.py:553] - [Response Agent] Step 2: Generating response
2025-07-07 20:21:59,667 - agent.agent - INFO - [agent.py:573] - [Response Agent] Response generation completed
2025-07-07 20:21:59,667 - agent.agent - INFO - [agent.py:681] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:21:59,667 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:23:13,930 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user1, session_id: session_12345
2025-07-07 20:23:13,930 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:23:13,931 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:23:13,931 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:23:13,931 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:23:13,931 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:23:13,931 - agent.agent - INFO - [agent.py:607] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user1
2025-07-07 20:23:13,932 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:23:13,932 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user1
2025-07-07 20:23:13,961 - agent.agent - INFO - [agent.py:465] - [Function Agent] Unified function agent created successfully
2025-07-07 20:23:13,961 - agent.agent - INFO - [agent.py:469] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:23:13,961 - agent.agent - INFO - [agent.py:600] - [Response Agent] Response agent created successfully
2025-07-07 20:23:13,962 - agent.agent - INFO - [agent.py:617] - [Multi-Agent System] All agents created successfully
2025-07-07 20:23:13,962 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user1
2025-07-07 20:23:13,962 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:23:13,962 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:23:13,962 - agent.agent - INFO - [agent.py:629] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user1
2025-07-07 20:23:13,962 - agent.agent - INFO - [agent.py:635] - [Multi-Agent System] Processing user input: track my order
2025-07-07 20:23:13,963 - agent.agent - INFO - [agent.py:641] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:23:13,963 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:23:13,963 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:23:19,794 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:23:27,597 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "order_tracking",
  "confidence": 0.95,
  "reasoning": "The user explicitly mentioned 'track my order', which directly relates to the 'order_tracking' intent. The context summary also confirms that the user is requesting to track their order, despite the lack of specific order details. This makes the intent classification highly confident."
}
```
2025-07-07 20:23:27,598 - agent.agent - INFO - [agent.py:652] - [Multi-Agent System] Detected intent: order_tracking
2025-07-07 20:23:27,598 - agent.agent - INFO - [agent.py:655] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:23:27,599 - agent.agent - INFO - [agent.py:406] - [Function Agent] Invoking unified function agent with input: {'input': 'track my order', 'intent': 'order_tracking'}
2025-07-07 20:23:38,149 - agent.agent - INFO - [agent.py:430] - [Function Agent] Agent execution completed
2025-07-07 20:23:38,152 - agent.agent - INFO - [agent.py:664] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:23:38,152 - agent.agent - INFO - [agent.py:667] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:23:38,153 - agent.agent - INFO - [agent.py:534] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:23:38,153 - agent.agent - INFO - [agent.py:539] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:23:43,980 - agent.agent - INFO - [agent.py:553] - [Response Agent] Step 2: Generating response
2025-07-07 20:23:50,676 - agent.agent - INFO - [agent.py:573] - [Response Agent] Response generation completed
2025-07-07 20:23:50,677 - agent.agent - INFO - [agent.py:681] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:23:50,677 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:24:56,760 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:24:56,773 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:24:56,855 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:24:56,862 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:25:04,545 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user3, session_id: session_12345
2025-07-07 20:25:04,545 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:25:04,545 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:25:04,546 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:25:04,546 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:25:04,546 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:25:04,546 - agent.agent - INFO - [agent.py:607] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user3
2025-07-07 20:25:04,546 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:25:04,547 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user3
2025-07-07 20:25:04,577 - agent.agent - INFO - [agent.py:465] - [Function Agent] Unified function agent created successfully
2025-07-07 20:25:04,577 - agent.agent - INFO - [agent.py:469] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:25:04,577 - agent.agent - INFO - [agent.py:600] - [Response Agent] Response agent created successfully
2025-07-07 20:25:04,578 - agent.agent - INFO - [agent.py:617] - [Multi-Agent System] All agents created successfully
2025-07-07 20:25:04,578 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user3
2025-07-07 20:25:04,578 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:25:04,578 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:25:04,578 - agent.agent - INFO - [agent.py:629] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user3
2025-07-07 20:25:04,578 - agent.agent - INFO - [agent.py:635] - [Multi-Agent System] Processing user input: do you have wireless mouse?
2025-07-07 20:25:04,578 - agent.agent - INFO - [agent.py:641] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:25:04,580 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:25:04,580 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:25:11,825 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:25:20,058 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "product_info",
  "confidence": 0.9,
  "reasoning": "The user is asking about the availability of a specific product, 'wireless mouse', which directly relates to seeking information about a product. This aligns with the 'product_info' intent, as the user's goal is likely to find out if the product is in stock or available for purchase."
}
```
2025-07-07 20:25:20,058 - agent.agent - INFO - [agent.py:652] - [Multi-Agent System] Detected intent: product_info
2025-07-07 20:25:20,060 - agent.agent - INFO - [agent.py:655] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:25:20,060 - agent.agent - INFO - [agent.py:406] - [Function Agent] Invoking unified function agent with input: {'input': 'do you have wireless mouse?', 'intent': 'product_info'}
2025-07-07 20:25:31,048 - agent.agent - INFO - [agent.py:430] - [Function Agent] Agent execution completed
2025-07-07 20:25:31,058 - agent.agent - ERROR - [agent.py:448] - [Function Agent] Error logging query: (psycopg2.errors.ForeignKeyViolation) insert or update on table "chat_logs" violates foreign key constraint "chat_logs_user_id_fkey"
DETAIL:  Key (user_id)=(user3) is not present in table "users".

[SQL: INSERT INTO chat_logs (seller_id, user_id, user_query, intent, entities, response, timestamp) VALUES (%(seller_id)s, %(user_id)s, %(user_query)s, %(intent)s, %(entities)s, %(response)s, %(timestamp)s) RETURNING chat_logs.id]
[parameters: {'seller_id': 1, 'user_id': 'user3', 'user_query': 'do you have wireless mouse?', 'intent': 'product_info', 'entities': 'LLM-extracted', 'response': "Yes, we have a wireless mouse available. Here are the details:\n\n- **Description**: Ergonomic wireless mouse  \n- **Price**: $19.99  \n- **Stock**: 99 units available  \n\nLet me know if you'd like to place an order or need more information!", 'timestamp': datetime.datetime(2025, 7, 7, 14, 55, 31, 50531)}]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-07-07 20:25:31,058 - agent.agent - INFO - [agent.py:664] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:25:31,058 - agent.agent - INFO - [agent.py:667] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:25:31,058 - agent.agent - INFO - [agent.py:534] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:25:31,060 - agent.agent - INFO - [agent.py:539] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:25:36,182 - agent.agent - INFO - [agent.py:553] - [Response Agent] Step 2: Generating response
2025-07-07 20:25:45,281 - agent.agent - INFO - [agent.py:573] - [Response Agent] Response generation completed
2025-07-07 20:25:45,281 - agent.agent - INFO - [agent.py:681] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:25:45,281 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:25:56,667 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user3, session_id: session_12345
2025-07-07 20:25:56,667 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:25:56,667 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:25:56,667 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:25:56,667 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:25:56,669 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:25:56,669 - agent.agent - INFO - [agent.py:607] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user3
2025-07-07 20:25:56,669 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:25:56,670 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user3
2025-07-07 20:25:56,704 - agent.agent - INFO - [agent.py:465] - [Function Agent] Unified function agent created successfully
2025-07-07 20:25:56,704 - agent.agent - INFO - [agent.py:469] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:25:56,705 - agent.agent - INFO - [agent.py:600] - [Response Agent] Response agent created successfully
2025-07-07 20:25:56,705 - agent.agent - INFO - [agent.py:617] - [Multi-Agent System] All agents created successfully
2025-07-07 20:25:56,705 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user3
2025-07-07 20:25:56,705 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:25:56,705 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:25:56,706 - agent.agent - INFO - [agent.py:629] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user3
2025-07-07 20:25:56,706 - agent.agent - INFO - [agent.py:635] - [Multi-Agent System] Processing user input: can I buy 1
2025-07-07 20:25:56,706 - agent.agent - INFO - [agent.py:641] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:25:56,706 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:25:56,706 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:26:02,174 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:26:09,434 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.7,
  "reasoning": "The user is inquiring about the possibility of purchasing a quantity of 1 of an unspecified product. This aligns with the 'place_order' intent, which involves making a purchase. However, the confidence is not higher because the product is unspecified, which could also slightly align with 'product_info' if the user is seeking information before purchasing."
}
```
2025-07-07 20:26:09,434 - agent.agent - INFO - [agent.py:652] - [Multi-Agent System] Detected intent: place_order
2025-07-07 20:26:09,434 - agent.agent - INFO - [agent.py:655] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:26:09,435 - agent.agent - INFO - [agent.py:406] - [Function Agent] Invoking unified function agent with input: {'input': 'can I buy 1', 'intent': 'place_order'}
2025-07-07 20:26:21,085 - agent.agent - INFO - [agent.py:430] - [Function Agent] Agent execution completed
2025-07-07 20:26:21,087 - agent.agent - ERROR - [agent.py:448] - [Function Agent] Error logging query: (psycopg2.errors.ForeignKeyViolation) insert or update on table "chat_logs" violates foreign key constraint "chat_logs_user_id_fkey"
DETAIL:  Key (user_id)=(user3) is not present in table "users".

[SQL: INSERT INTO chat_logs (seller_id, user_id, user_query, intent, entities, response, timestamp) VALUES (%(seller_id)s, %(user_id)s, %(user_query)s, %(intent)s, %(entities)s, %(response)s, %(timestamp)s) RETURNING chat_logs.id]
[parameters: {'seller_id': 1, 'user_id': 'user3', 'user_query': 'can I buy 1', 'intent': 'place_order', 'entities': 'LLM-extracted', 'response': "It seems you don't have an account with us yet. To proceed with your order, I'll need some details to create your account. Could you please provide y ... (23 characters truncated) ... Email address\n- Delivery address\n- Phone number\n\nOnce you share these, I can set up your account and process your order for the wireless mouse. 😊", 'timestamp': datetime.datetime(2025, 7, 7, 14, 56, 21, 85488)}]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-07-07 20:26:21,087 - agent.agent - INFO - [agent.py:664] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:26:21,088 - agent.agent - INFO - [agent.py:667] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:26:21,088 - agent.agent - INFO - [agent.py:534] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:26:21,088 - agent.agent - INFO - [agent.py:539] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:26:27,031 - agent.agent - INFO - [agent.py:553] - [Response Agent] Step 2: Generating response
2025-07-07 20:26:34,193 - agent.agent - INFO - [agent.py:573] - [Response Agent] Response generation completed
2025-07-07 20:26:34,194 - agent.agent - INFO - [agent.py:681] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:26:34,194 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:27:35,526 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user3, session_id: session_12345
2025-07-07 20:27:35,526 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:27:35,527 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:27:35,527 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:27:35,527 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:27:35,527 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:27:35,527 - agent.agent - INFO - [agent.py:607] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user3
2025-07-07 20:27:35,528 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:27:35,528 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user3
2025-07-07 20:27:35,559 - agent.agent - INFO - [agent.py:465] - [Function Agent] Unified function agent created successfully
2025-07-07 20:27:35,560 - agent.agent - INFO - [agent.py:469] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:27:35,560 - agent.agent - INFO - [agent.py:600] - [Response Agent] Response agent created successfully
2025-07-07 20:27:35,560 - agent.agent - INFO - [agent.py:617] - [Multi-Agent System] All agents created successfully
2025-07-07 20:27:35,561 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user3
2025-07-07 20:27:35,561 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:27:35,561 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:27:35,561 - agent.agent - INFO - [agent.py:629] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user3
2025-07-07 20:27:35,561 - agent.agent - INFO - [agent.py:635] - [Multi-Agent System] Processing user input: Name : Nipul Viduranga , Email : nipul@gmail.com , Address : Galle,Neluwa , Phone number : 0713966820
2025-07-07 20:27:35,562 - agent.agent - INFO - [agent.py:641] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:27:35,562 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:27:35,562 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:27:42,609 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:27:49,983 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "user_management",
  "confidence": 0.9,
  "reasoning": "The user provided personal information including name, email, address, and phone number, which is typically associated with updating or managing user account details. There is no mention of products, orders, or general inquiries, making 'user_management' the most likely intent."
}
```
2025-07-07 20:27:49,984 - agent.agent - INFO - [agent.py:652] - [Multi-Agent System] Detected intent: user_management
2025-07-07 20:27:49,984 - agent.agent - INFO - [agent.py:655] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:27:49,985 - agent.agent - INFO - [agent.py:406] - [Function Agent] Invoking unified function agent with input: {'input': 'Name : Nipul Viduranga , Email : nipul@gmail.com , Address : Galle,Neluwa , Phone number : 0713966820', 'intent': 'user_management'}
2025-07-07 20:28:02,679 - agent.agent - ERROR - [agent.py:457] - [Function Agent] Error in agent execution: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_pkey"
DETAIL:  Key (id)=(user3) already exists.

[SQL: INSERT INTO users (id, name, email, address, number, created_at) VALUES (%(id)s, %(name)s, %(email)s, %(address)s, %(number)s, %(created_at)s)]
[parameters: {'id': 'user3', 'name': 'Nipul Viduranga', 'email': 'nipul@gmail.com', 'address': 'Galle,Neluwa', 'number': '0713966820', 'created_at': datetime.datetime(2025, 7, 7, 14, 58, 2, 677410)}]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-07-07 20:28:02,680 - agent.agent - ERROR - [agent.py:659] - [Multi-Agent System] Function execution failed: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_pkey"
DETAIL:  Key (id)=(user3) already exists.

[SQL: INSERT INTO users (id, name, email, address, number, created_at) VALUES (%(id)s, %(name)s, %(email)s, %(address)s, %(number)s, %(created_at)s)]
[parameters: {'id': 'user3', 'name': 'Nipul Viduranga', 'email': 'nipul@gmail.com', 'address': 'Galle,Neluwa', 'number': '0713966820', 'created_at': datetime.datetime(2025, 7, 7, 14, 58, 2, 677410)}]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-07-07 20:28:02,680 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:31:12,700 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:31:12,727 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:31:12,814 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:31:12,822 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:32:18,841 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:32:18,867 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:32:18,947 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:32:18,951 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:32:37,313 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user3, session_id: session_12345
2025-07-07 20:32:37,313 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:32:37,313 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:32:37,313 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:32:37,314 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:32:37,314 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:32:37,314 - agent.agent - INFO - [agent.py:607] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user3
2025-07-07 20:32:37,314 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:32:37,315 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user3
2025-07-07 20:32:37,347 - agent.agent - INFO - [agent.py:465] - [Function Agent] Unified function agent created successfully
2025-07-07 20:32:37,347 - agent.agent - INFO - [agent.py:469] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:32:37,348 - agent.agent - INFO - [agent.py:600] - [Response Agent] Response agent created successfully
2025-07-07 20:32:37,348 - agent.agent - INFO - [agent.py:617] - [Multi-Agent System] All agents created successfully
2025-07-07 20:32:37,348 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user3
2025-07-07 20:32:37,348 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:32:37,348 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:32:37,348 - agent.agent - INFO - [agent.py:629] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user3
2025-07-07 20:32:37,348 - agent.agent - INFO - [agent.py:635] - [Multi-Agent System] Processing user input: can I buy 1 of this?
2025-07-07 20:32:37,350 - agent.agent - INFO - [agent.py:641] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:32:37,350 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:32:37,350 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:32:43,369 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:32:49,738 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.8,
  "reasoning": "The user is asking about the possibility of purchasing a quantity of 1 of an unspecified product, which directly relates to the intent of placing an order. The confidence is not 1.0 because the product is unspecified, which might require further clarification."
}
```
2025-07-07 20:32:49,738 - agent.agent - INFO - [agent.py:652] - [Multi-Agent System] Detected intent: place_order
2025-07-07 20:32:49,739 - agent.agent - INFO - [agent.py:655] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:32:49,739 - agent.agent - INFO - [agent.py:406] - [Function Agent] Invoking unified function agent with input: {'input': 'can I buy 1 of this?', 'intent': 'place_order'}
2025-07-07 20:33:16,371 - agent.agent - INFO - [agent.py:430] - [Function Agent] Agent execution completed
2025-07-07 20:33:16,375 - agent.agent - INFO - [agent.py:664] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:33:16,375 - agent.agent - INFO - [agent.py:667] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:33:16,375 - agent.agent - INFO - [agent.py:534] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:33:16,376 - agent.agent - INFO - [agent.py:539] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:33:23,659 - agent.agent - INFO - [agent.py:553] - [Response Agent] Step 2: Generating response
2025-07-07 20:33:31,568 - agent.agent - INFO - [agent.py:573] - [Response Agent] Response generation completed
2025-07-07 20:33:31,570 - agent.agent - INFO - [agent.py:681] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:33:31,570 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:36:21,663 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:36:21,677 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:36:21,759 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:36:21,763 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:36:52,844 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user4, session_id: session_12345
2025-07-07 20:36:52,845 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:36:52,845 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:36:52,845 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:36:52,845 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:36:52,846 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:36:52,846 - agent.agent - INFO - [agent.py:607] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user4
2025-07-07 20:36:52,846 - agent.agent - INFO - [agent.py:153] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:36:52,846 - agent.agent - INFO - [agent.py:223] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user4
2025-07-07 20:36:52,876 - agent.agent - INFO - [agent.py:465] - [Function Agent] Unified function agent created successfully
2025-07-07 20:36:52,876 - agent.agent - INFO - [agent.py:469] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:36:52,877 - agent.agent - INFO - [agent.py:600] - [Response Agent] Response agent created successfully
2025-07-07 20:36:52,877 - agent.agent - INFO - [agent.py:617] - [Multi-Agent System] All agents created successfully
2025-07-07 20:36:52,878 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user4
2025-07-07 20:36:52,878 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:36:52,878 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:36:52,878 - agent.agent - INFO - [agent.py:629] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user4
2025-07-07 20:36:52,878 - agent.agent - INFO - [agent.py:635] - [Multi-Agent System] Processing user input: I need to buy mechanical keyboard
2025-07-07 20:36:52,878 - agent.agent - INFO - [agent.py:641] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:36:52,878 - agent.agent - INFO - [agent.py:188] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:36:52,880 - agent.agent - INFO - [agent.py:193] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:36:58,451 - agent.agent - INFO - [agent.py:202] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:37:03,594 - agent.agent - INFO - [agent.py:213] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "place_order",
  "confidence": 0.9,
  "reasoning": "The user explicitly mentions the need to buy a mechanical keyboard, which directly indicates an intention to place an order for a product."
}
```
2025-07-07 20:37:03,595 - agent.agent - INFO - [agent.py:652] - [Multi-Agent System] Detected intent: place_order
2025-07-07 20:37:03,595 - agent.agent - INFO - [agent.py:655] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:37:03,595 - agent.agent - INFO - [agent.py:406] - [Function Agent] Invoking unified function agent with input: {'input': 'I need to buy mechanical keyboard', 'intent': 'place_order'}
2025-07-07 20:37:17,467 - agent.agent - INFO - [agent.py:430] - [Function Agent] Agent execution completed
2025-07-07 20:37:17,476 - agent.agent - ERROR - [agent.py:448] - [Function Agent] Error logging query: (psycopg2.errors.ForeignKeyViolation) insert or update on table "chat_logs" violates foreign key constraint "chat_logs_user_id_fkey"
DETAIL:  Key (user_id)=(user4) is not present in table "users".

[SQL: INSERT INTO chat_logs (seller_id, user_id, user_query, intent, entities, response, timestamp) VALUES (%(seller_id)s, %(user_id)s, %(user_query)s, %(intent)s, %(entities)s, %(response)s, %(timestamp)s) RETURNING chat_logs.id]
[parameters: {'seller_id': 1, 'user_id': 'user4', 'user_query': 'I need to buy mechanical keyboard', 'intent': 'place_order', 'entities': 'LLM-extracted', 'response': "Here's the product you're interested in:\n\n- **Product Name**: Mechanical Keyboard  \n- **Description**: Backlit mechanical keyboard  \n- **Price**: $49.99  \n- **Stock Available**: 50  \n\nWould you like to proceed with placing an order for this keyboard? If yes, let me know the quantity.", 'timestamp': datetime.datetime(2025, 7, 7, 15, 7, 17, 468639)}]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-07-07 20:37:17,477 - agent.agent - INFO - [agent.py:664] - [Multi-Agent System] Function executed successfully via LLM agent
2025-07-07 20:37:17,477 - agent.agent - INFO - [agent.py:667] - [Multi-Agent System] Step 3: Generating response
2025-07-07 20:37:17,477 - agent.agent - INFO - [agent.py:534] - [Response Agent] Processing response for seller_id: 1
2025-07-07 20:37:17,478 - agent.agent - INFO - [agent.py:539] - [Response Agent] Step 1: Determining response strategy
2025-07-07 20:37:22,556 - agent.agent - INFO - [agent.py:553] - [Response Agent] Step 2: Generating response
2025-07-07 20:37:28,992 - agent.agent - INFO - [agent.py:573] - [Response Agent] Response generation completed
2025-07-07 20:37:28,992 - agent.agent - INFO - [agent.py:681] - [Multi-Agent System] Processing completed successfully
2025-07-07 20:37:28,992 - services.chat - INFO - [chat.py:82] - [Chat API] Successfully processed user input
2025-07-07 20:38:16,899 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:38:16,926 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:38:17,010 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:38:17,014 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:39:43,490 - utils.logger - INFO - [logger.py:59] - Global logging configured - Level: INFO, Debug Mode: False
2025-07-07 20:39:43,514 - faiss.loader - INFO - [loader.py:125] - Loading faiss with AVX2 support.
2025-07-07 20:39:43,594 - faiss.loader - INFO - [loader.py:127] - Successfully loaded faiss with AVX2 support.
2025-07-07 20:39:43,599 - faiss - INFO - [__init__.py:186] - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-07-07 20:39:57,682 - services.chat - INFO - [chat.py:23] - [Chat API] Received chat request - seller_id: 1, user_id: user4, session_id: session_12345
2025-07-07 20:39:57,682 - services.chat - INFO - [chat.py:29] - [Chat API] Validating seller_id
2025-07-07 20:39:57,683 - services.chat - INFO - [chat.py:36] - [Chat API] Validating user_id
2025-07-07 20:39:57,683 - services.chat - INFO - [chat.py:43] - [Chat API] Checking if user exists
2025-07-07 20:39:57,683 - services.chat - INFO - [chat.py:58] - [Chat API] Formatting chat history
2025-07-07 20:39:57,683 - services.chat - INFO - [chat.py:66] - [Chat API] Creating multi-agent system
2025-07-07 20:39:57,683 - agent.agent - INFO - [agent.py:617] - [Multi-Agent System] Creating multi-agent system for seller_id: 1, user_id: user4
2025-07-07 20:39:57,684 - agent.agent - INFO - [agent.py:154] - [Intent Agent] Creating intent agent for seller_id: 1
2025-07-07 20:39:57,684 - agent.agent - INFO - [agent.py:224] - [Function Agent] Creating unified function agent for seller_id: 1, user_id: user4
2025-07-07 20:39:57,724 - agent.agent - INFO - [agent.py:475] - [Function Agent] Unified function agent created successfully
2025-07-07 20:39:57,724 - agent.agent - INFO - [agent.py:479] - [Response Agent] Creating response agent for seller_id: 1
2025-07-07 20:39:57,724 - agent.agent - INFO - [agent.py:610] - [Response Agent] Response agent created successfully
2025-07-07 20:39:57,725 - agent.agent - INFO - [agent.py:627] - [Multi-Agent System] All agents created successfully
2025-07-07 20:39:57,725 - services.chat - INFO - [chat.py:68] - [Chat API] Agent system created successfully for seller_id: 1, user_id: user4
2025-07-07 20:39:57,725 - services.chat - INFO - [chat.py:71] - [Chat API] Getting process_input function from agent system
2025-07-07 20:39:57,725 - services.chat - INFO - [chat.py:75] - [Chat API] Processing user input through multi-agent system
2025-07-07 20:39:57,726 - agent.agent - INFO - [agent.py:639] - [Multi-Agent System] Starting processing for seller_id: 1, user_id: user4
2025-07-07 20:39:57,726 - agent.agent - INFO - [agent.py:645] - [Multi-Agent System] Processing user input: give me 1
2025-07-07 20:39:57,726 - agent.agent - INFO - [agent.py:651] - [Multi-Agent System] Step 1: Detecting intent
2025-07-07 20:39:57,726 - agent.agent - INFO - [agent.py:189] - [Intent Agent] Processing input for seller_id: 1
2025-07-07 20:39:57,726 - agent.agent - INFO - [agent.py:194] - [Intent Agent] Step 1: Extracting entities
2025-07-07 20:40:06,117 - agent.agent - INFO - [agent.py:203] - [Intent Agent] Step 2: Classifying intent
2025-07-07 20:40:13,336 - agent.agent - INFO - [agent.py:214] - [Intent Agent] Intent classification completed: ```json
{
  "intent": "general_inquiry",
  "confidence": 0.5,
  "reasoning": "The user's request is vague, mentioning only a quantity ('1') without specifying a product or context. This lack of specificity makes it difficult to classify the intent more precisely, but it aligns most closely with a general inquiry due to the absence of clear indicators for other intents like product_info, order_tracking, place_order, or user_management."
}
```
2025-07-07 20:40:13,336 - agent.agent - INFO - [agent.py:662] - [Multi-Agent System] Detected intent: general_inquiry
2025-07-07 20:40:13,336 - agent.agent - INFO - [agent.py:665] - [Multi-Agent System] Step 2: Executing function via LLM agent
2025-07-07 20:40:13,337 - agent.agent - INFO - [agent.py:416] - [Function Agent] Invoking unified function agent with input: {'input': 'give me 1', 'intent': 'general_inquiry'}
